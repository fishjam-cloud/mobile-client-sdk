diff --git a/node_modules/expo-modules-core/android/.classpath b/node_modules/expo-modules-core/android/.classpath
new file mode 100644
index 0000000..bbe97e5
--- /dev/null
+++ b/node_modules/expo-modules-core/android/.classpath
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-17/"/>
+	<classpathentry kind="con" path="org.eclipse.buildship.core.gradleclasspathcontainer"/>
+	<classpathentry kind="output" path="bin/default"/>
+</classpath>
diff --git a/node_modules/expo-modules-core/android/.project b/node_modules/expo-modules-core/android/.project
new file mode 100644
index 0000000..21cbe44
--- /dev/null
+++ b/node_modules/expo-modules-core/android/.project
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>expo-modules-core</name>
+	<comment>Project expo-modules-core created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1732229263607</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/expo-modules-core/android/.settings/org.eclipse.buildship.core.prefs b/node_modules/expo-modules-core/android/.settings/org.eclipse.buildship.core.prefs
new file mode 100644
index 0000000..f7c031c
--- /dev/null
+++ b/node_modules/expo-modules-core/android/.settings/org.eclipse.buildship.core.prefs
@@ -0,0 +1,2 @@
+connection.project.dir=../../../examples/fishjam-chat/android
+eclipse.preferences.version=1
diff --git a/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift b/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift
index 284a0aa..c673fd3 100644
--- a/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift
+++ b/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift
@@ -105,59 +105,6 @@ open class ExpoAppDelegate: UIResponder, UIApplicationDelegate {
     }
   }
 
-  // MARK: - Handling Remote Notification Registration
-
-  open func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
-    subscribers.forEach { $0.application?(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken) }
-  }
-
-  open func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
-    subscribers.forEach { $0.application?(application, didFailToRegisterForRemoteNotificationsWithError: error) }
-  }
-
-  open func application(
-    _ application: UIApplication,
-    didReceiveRemoteNotification userInfo: [AnyHashable: Any],
-    fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void
-  ) {
-    let selector = #selector(application(_:didReceiveRemoteNotification:fetchCompletionHandler:))
-    let subs = subscribers.filter { $0.responds(to: selector) }
-    var subscribersLeft = subs.count
-    let dispatchQueue = DispatchQueue(label: "expo.application.remoteNotification", qos: .userInteractive)
-    var failedCount = 0
-    var newDataCount = 0
-
-    let handler = { (result: UIBackgroundFetchResult) in
-      dispatchQueue.sync {
-        if result == .failed {
-          failedCount += 1
-        } else if result == .newData {
-          newDataCount += 1
-        }
-
-        subscribersLeft -= 1
-
-        if subscribersLeft == 0 {
-          if newDataCount > 0 {
-            completionHandler(.newData)
-          } else if failedCount > 0 {
-            completionHandler(.failed)
-          } else {
-            completionHandler(.noData)
-          }
-        }
-      }
-    }
-
-    if subs.isEmpty {
-      completionHandler(.noData)
-    } else {
-      subs.forEach { subscriber in
-        subscriber.application?(application, didReceiveRemoteNotification: userInfo, fetchCompletionHandler: handler)
-      }
-    }
-  }
-
   // MARK: - Continuing User Activity and Handling Quick Actions
 
   open func application(_ application: UIApplication, willContinueUserActivityWithType userActivityType: String) -> Bool {
