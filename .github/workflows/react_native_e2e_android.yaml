#
# A Multi-Layered Caching Strategy for Optimizing React Native Android Builds in GitHub Actions
#
# This workflow demonstrates a comprehensive, multi-layered caching strategy to significantly
# reduce the build time for a React Native Android application in a GitHub Actions environment.
# It addresses common pitfalls and implements best practices for caching dependencies,
# build artifacts, and optimizing the Gradle build environment.
#
name: React Native - Android E2E tests (Optimized)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  rn_e2e_android:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    permissions:
      contents: read
      packages: read

    # Service container for dependencies like Fishjam, unchanged from the original.
    services:
      fishjam:
        image: ghcr.io/fishjam-cloud/fishjam:0.10.0-dev
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        env:
          FJ_CHECK_ORIGIN: false
          FJ_HOST: localhost:5002
          FJ_PORT: "5002"
          FJ_WEBRTC_USED: true
          FJ_WEBRTC_TURN_PORT_RANGE: 50000-50050
          FJ_WEBRTC_TURN_IP: 127.0.0.1
          FJ_WEBRTC_TURN_LISTEN_IP: 0.0.0.0
          FJ_SERVER_API_TOKEN: development
        ports:
          - 5002:5002
          - 50000-50050:50000-50050/udp

    # Environment variables for the Android emulator and build tools, unchanged.
    env:
      ARCH: "x86_64"
      TARGET: "default"
      API_LEVEL: "33"
      BUILD_TOOLS: "33.0.0"
      ANDROID_API_LEVEL: android;33
      ANDROID_APIS: google_apis;x86_64
      EMULATOR_PACKAGE: system-images;android-33;default;x86_64
      EMULATOR_NAME: "nexus"
      EMULATOR_DEVICE: "Nexus 6"
      PLATFORM_VERSION: platforms;android-33
      BUILD_TOOL: "build-tools;33.0.0"
      ANDROID_CMD: "commandlinetools-linux-10406996_latest.zip"
      ANDROID_APP_PATH: ${{ github.workspace }}/examples/fishjam-chat/android/app/build/outputs/apk/release/app-release.apk

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create.env file for tests
        run: |
          echo -e "
          FISHJAM_HOST_SERVER=127.0.0.1:5002
          FISHJAM_HOST_MOBILE=10.0.2.2:5002
          ANDROID_DEVICE_NAME=$EMULATOR_DEVICE
          ANDROID_APP_PATH=$ANDROID_APP_PATH
          " > $GITHUB_WORKSPACE/examples/webdriverio-test/.env

      # Environment setup steps, largely unchanged.
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Check KVM status
        run: |
          sudo apt-get install -y cpu-checker
          kvm-ok || echo "KVM not available"

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Install system dependencies
        run: >
          sudo apt-get update && sudo apt-get install -y --no-install-recommends
          curl wget unzip bzip2 libpulse-dev libxshmfence-dev xauth xvfb x11vnc fluxbox wmctrl libdbus-glib-1-2

      # Setup Node.js environment
      - name: Enable Corepack
        run: corepack enable
      - name: Use Node.js v22
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      #
      # == LAYER 1: YARN DEPENDENCY CACHING ==
      #
      - name: Cache Yarn dependencies
        id: yarn-cache
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Yarn dependencies
        if: steps.yarn-cache.outputs.cache-hit!= 'true'
        run: |
          cd $GITHUB_WORKSPACE
          yarn install --frozen-lockfile

      - name: Run yarn build
        run: |
          cd $GITHUB_WORKSPACE
          yarn build

      #
      # == LAYER 2: GRADLE DEPENDENCY CACHING ==
      #
      - name: Setup Java JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "zulu"
          # NOTE: The 'cache: gradle' option has been REMOVED here to allow for a more
          # explicit and precise caching strategy using actions/cache below.

      - name: Cache Gradle dependencies and wrapper
        id: gradle-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/gradle-wrapper.properties', '**/settings.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Setup Android SDK environment
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install emulator and build tools
        run: |
          echo "y" | sdkmanager --licenses
          echo "y" | sdkmanager --verbose --no_https "$EMULATOR_PACKAGE" "$PLATFORM_VERSION" "$BUILD_TOOL"

      # Setup and start emulator
      - name: Create AVD
        run: echo "y" | avdmanager --verbose create avd --force --name "$EMULATOR_NAME" --device "$EMULATOR_DEVICE" --package "$EMULATOR_PACKAGE"

      - name: Start emulator
        # INCREASED TIMEOUT AND ADDED STABILITY FLAGS
        timeout-minutes: 10
        run: |
          /usr/local/lib/android/sdk/tools/emulator -list-avds
          echo "Starting emulator and waiting for boot to complete...."

          # START EMULATOR WITH FLAGS FOR CI
          xvfb-run -a /usr/local/lib/android/sdk/tools/emulator -avd nexus \
            -no-snapshot \
            -no-window \
            -no-audio \
            -gpu swiftshader_indirect &

          while [ "`adb shell getprop sys.boot_completed | tr -d '\r'`" != "1" ]; do echo "Waiting for emulator boot..."; sleep 5; done
          adb wait-for-device
          echo "Emulator has finished booting"
          adb devices
          sleep 10

      #
      # == LAYER 3: APK ARTIFACT CACHING ==
      #
      - name: Restore cached APK
        id: restore-apk
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.ANDROID_APP_PATH }}
          key: ${{ runner.os }}-apk-${{ hashFiles('**/yarn.lock', '**/package.json', 'android/**/build.gradle', 'android/gradle.properties', 'android/gradle/wrapper/gradle-wrapper.properties', 'android/app/src/**/*.java', 'android/app/src/**/*.kt', 'android/app/src/**/*.xml') }}
          restore-keys: |
            ${{ runner.os }}-apk-

      # This step now correctly references the 'restore-apk' step's output.
      # It will only run if no exact cache match for the APK was found.
      - name: Build release APK
        if: steps.restore-apk.outputs.cache-hit!= 'true'
        timeout-minutes: 20
        run: |
          cd $GITHUB_WORKSPACE/examples/fishjam-chat/
          yarn prebuild
          cd android
          # The --no-daemon flag is recommended for CI environments for clean, isolated builds.
          ./gradlew assembleRelease --no-daemon

      # This step saves the newly built APK to the cache for future runs.
      # It only runs if the build step was executed (i.e., on a cache miss).
      - name: Save APK to cache
        if: steps.restore-apk.outputs.cache-hit!= 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.ANDROID_APP_PATH }}
          key: ${{ runner.os }}-apk-${{ hashFiles('**/yarn.lock', '**/package.json', 'android/**/build.gradle', 'android/gradle.properties', 'android/gradle/wrapper/gradle-wrapper.properties', 'android/app/src/**/*.java', 'android/app/src/**/*.kt', 'android/app/src/**/*.xml') }}

      - name: Install Appium and drivers
        run: |
          npm i --location=global appium
          appium driver install uiautomator2

      - name: Start Appium Server
        run: appium &

      - name: Logs from app to file
        run: adb logcat "*:S" ReactNative:V ReactNativeJS:V > $GITHUB_WORKSPACE/examples/webdriverio-test/logs.txt &

      - name: Run tests
        run: |
          cd $GITHUB_WORKSPACE/examples/webdriverio-test
          npx wdio wdio.conf.ts 2>&1 | tee appium.txt; test ${PIPESTATUS} -eq 0

      # Upload artifacts for debugging, unchanged.
      - name: Upload test output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: appium.txt
          path: ${{ github.workspace }}/examples/webdriverio-test/appium.txt

      - name: Upload logs from app
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs.txt
          path: ${{ github.workspace }}/examples/webdriverio-test/logs.txt
