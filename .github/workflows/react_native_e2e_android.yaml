# A Comprehensive Guide to Optimizing Android E2E Test Workflows in GitHub Actions via Advanced Caching Strategies
#
# This workflow has been re-architected to implement a multi-layered caching strategy,
# significantly reducing build and test times. The optimizations include:
# 1. Consolidated and efficient dependency caching for Yarn and Gradle.
# 2. Caching of the Android SDK components to avoid re-downloads.
# 3. Robust artifact caching for the generated APK, skipping recompilation when source code is unchanged.
# 4. Advanced emulator snapshot caching to reduce AVD startup time from minutes to seconds.
# 5. Enhanced security practices to control cache writes and mitigate poisoning risks.

name: React Native - Android E2E tests (Optimized)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  rn_e2e_android:
    runs-on: ubuntu-latest
    timeout-minutes: 25 # Reduced timeout reflecting expected performance gains

    permissions:
      contents: read
      packages: read
      # Write permissions are required for the service container to pull from ghcr.io
      # This is standard and secure.

    services:
      fishjam:
        image: ghcr.io/fishjam-cloud/fishjam:0.10.0-dev
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        env:
          FJ_CHECK_ORIGIN: false
          FJ_HOST: localhost:5002
          FJ_PORT: "5002"
          FJ_WEBRTC_USED: true
          FJ_WEBRTC_TURN_PORT_RANGE: 50000-50050
          FJ_WEBRTC_TURN_IP: 127.0.0.1
          FJ_WEBRTC_TURN_LISTEN_IP: 0.0.0.0
          FJ_SERVER_API_TOKEN: development
        ports:
          - 5002:5002
          - 50000-50050:50000-50050/udp

    env:
      # Environment variables remain largely the same, defining the Android environment.
      # Note: The path to the emulator executable has been updated to reflect its location within the SDK.
      EMULATOR_PATH: /usr/local/lib/android/sdk/emulator/emulator
      ARCH: "x86_64"
      TARGET: "default"
      API_LEVEL: "33"
      BUILD_TOOLS: "33.0.0"
      EMULATOR_PACKAGE: "system-images;android-33;default;x86_64"
      EMULATOR_NAME: "nexus_e2e"
      EMULATOR_DEVICE: "Nexus 6"
      PLATFORM_VERSION: "platforms;android-33"
      BUILD_TOOL: "build-tools;33.0.0"
      ANDROID_APP_PATH: ${{ github.workspace }}/examples/fishjam-chat/android/app/build/outputs/apk/release/app-release.apk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create.env file for tests
        run: |
          echo "FISHJAM_HOST_SERVER=127.0.0.1:5002" > $GITHUB_WORKSPACE/examples/webdriverio-test/.env
          echo "FISHJAM_HOST_MOBILE=10.0.2.2:5002" >> $GITHUB_WORKSPACE/examples/webdriverio-test/.env
          echo "ANDROID_DEVICE_NAME=$EMULATOR_DEVICE" >> $GITHUB_WORKSPACE/examples/webdriverio-test/.env
          echo "ANDROID_APP_PATH=$ANDROID_APP_PATH" >> $GITHUB_WORKSPACE/examples/webdriverio-test/.env

      - name: Enable KVM group permissions for hardware acceleration
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y curl wget unzip libpulse-dev xauth xvfb

      # --- LAYER 1: DEPENDENCY & TOOLCHAIN CACHING ---

      - name: Enable Corepack for Yarn
        run: corepack enable

      - name: Use Node.js and Cache Yarn Dependencies
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          # This is the recommended way to cache Yarn dependencies.
          cache: "yarn"

      - name: Run yarn install
        # No need for a cache-hit condition here; `setup-node` handles it.
        # Yarn is smart enough to only fetch missing packages if the cache is restored.
        run: |
          cd $GITHUB_WORKSPACE
          yarn install --frozen-lockfile

      - name: Run yarn build (for project dependencies)
        run: |
          cd $GITHUB_WORKSPACE
          yarn build

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "zulu"
          # The `cache: 'gradle'` parameter has been REMOVED.
          # Caching will be handled exclusively by the specialized `setup-gradle` action.

      - name: Setup Gradle and Cache Dependencies
        uses: gradle/actions/setup-gradle@v4
        # This action provides superior caching for the entire Gradle User Home.

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          # Using a specific, older version as per the original workflow's env vars
          # This can be updated to a newer version like '10406996' if desired
          cmdline-tools-version: 8512546

      - name: Cache Android SDK Components
        id: cache-android-sdk
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/android/sdk
          key: android-sdk-v1-${{ runner.os }}-${{ env.API_LEVEL }}-${{ env.BUILD_TOOLS }}-${{ env.EMULATOR_PACKAGE }}

      - name: Accept licenses
        run: echo "y" | sdkmanager --licenses

      - name: Install emulator, platform, and build tools (on cache miss)
        if: steps.cache-android-sdk.outputs.cache-hit!= 'true'
        run: |
          echo "y" | sdkmanager --verbose --no_https ${{ env.EMULATOR_PACKAGE }}
          echo "y" | sdkmanager --verbose --no_https ${{ env.PLATFORM_VERSION }}
          echo "y" | sdkmanager --verbose --no_https ${{ env.BUILD_TOOL }}

      # --- LAYER 2: APK ARTIFACT CACHING ---

      - name: Restore cached APK
        id: restore-apk
        uses: actions/cache@v4
        with:
          path: ${{ env.ANDROID_APP_PATH }}
          key: apk-v1-${{ runner.os }}-${{ hashFiles('**/yarn.lock', 'examples/fishjam-chat/app.json', 'examples/fishjam-chat/src/**/*.ts', 'examples/fishjam-chat/src/**/*.tsx') }}
          restore-keys: |
            apk-v1-${{ runner.os }}-

      - name: Build release app (on cache miss)
        if: steps.restore-apk.outputs.cache-hit!= 'true'
        timeout-minutes: 20
        run: |
          cd $GITHUB_WORKSPACE/examples/fishjam-chat/
          yarn prebuild
          cd android
          ./gradlew assembleRelease

      # --- LAYER 3: EMULATOR SNAPSHOT CACHING ---

      - name: Install Appium and UIAutomator2 driver
        run: |
          npm i --location=global appium
          appium driver install uiautomator2

      - name: Cache AVD
        id: avd-cache
        uses: actions/cache@v4
        with:
          path: ~/.android/avd
          key: avd-v1-${{ env.EMULATOR_NAME }}-${{ env.API_LEVEL }}-${{ runner.os }}

      - name: Create and cold-boot emulator (on cache miss)
        if: steps.avd-cache.outputs.cache-hit!= 'true'
        timeout-minutes: 10
        run: |
          echo "y" | avdmanager --verbose create avd --force --name "${{ env.EMULATOR_NAME }}" \
            --device "${{ env.EMULATOR_DEVICE }}" --package "${{ env.EMULATOR_PACKAGE }}"
          echo "Starting emulator for the first time and waiting for boot to complete..."
          xvfb-run -a ${{ env.EMULATOR_PATH }} -avd ${{ env.EMULATOR_NAME }} -no-snapshot-save -no-window -no-audio -no-boot-anim &
          while [ "$(adb shell getprop sys.boot_completed | tr -d '\r')"!= "1" ]; do echo "Waiting for emulator boot..."; sleep 5; done
          adb wait-for-device
          echo "Emulator has finished booting."

      - name: Start emulator from cache (on cache hit)
        if: steps.avd-cache.outputs.cache-hit == 'true'
        timeout-minutes: 5
        run: |
          echo "Starting emulator from cached snapshot..."
          xvfb-run -a ${{ env.EMULATOR_PATH }} -avd ${{ env.EMULATOR_NAME }} -no-snapshot-save -no-window -no-audio -no-boot-anim &
          while [ "$(adb shell getprop sys.boot_completed | tr -d '\r')"!= "1" ]; do echo "Waiting for emulator boot from cache..."; sleep 2; done
          adb wait-for-device
          echo "Emulator booted from cache."
          adb devices

      # --- E2E TESTING & ARTIFACT UPLOAD ---

      - name: Capture app logs to file
        run: |
          cd $GITHUB_WORKSPACE/examples/webdriverio-test
          adb -e logcat "*:S" ReactNative:V ReactNativeJS:V > logs.txt &

      - name: Run WebdriverIO tests
        run: |
          cd $GITHUB_WORKSPACE/examples/webdriverio-test
          npx wdio wdio.conf.ts 2>&1 | tee appium.txt; test ${PIPESTATUS} -eq 0

      - name: Upload test output artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: appium-output
          path: ${{ github.workspace }}/examples/webdriverio-test/appium.txt

      - name: Upload app logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-app-logs
          path: ${{ github.workspace }}/examples/webdriverio-test/logs.txt
