// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: fishjam/peer_notifications.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package fishjam;

@kotlin.jvm.JvmName("-initializepeerMessage")
public inline fun peerMessage(block: fishjam.PeerMessageKt.Dsl.() -> kotlin.Unit): fishjam.PeerNotifications.PeerMessage =
  fishjam.PeerMessageKt.Dsl._create(fishjam.PeerNotifications.PeerMessage.newBuilder()).apply { block() }._build()
/**
 * ```
 * Defines any type of message sent between FJ and a peer
 * ```
 *
 * Protobuf type `fishjam.PeerMessage`
 */
public object PeerMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: fishjam.PeerNotifications.PeerMessage.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: fishjam.PeerNotifications.PeerMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): fishjam.PeerNotifications.PeerMessage = _builder.build()

    /**
     * `.fishjam.PeerMessage.Authenticated authenticated = 1;`
     */
    public var authenticated: fishjam.PeerNotifications.PeerMessage.Authenticated
      @JvmName("getAuthenticated")
      get() = _builder.getAuthenticated()
      @JvmName("setAuthenticated")
      set(value) {
        _builder.setAuthenticated(value)
      }
    /**
     * `.fishjam.PeerMessage.Authenticated authenticated = 1;`
     */
    public fun clearAuthenticated() {
      _builder.clearAuthenticated()
    }
    /**
     * `.fishjam.PeerMessage.Authenticated authenticated = 1;`
     * @return Whether the authenticated field is set.
     */
    public fun hasAuthenticated(): kotlin.Boolean {
      return _builder.hasAuthenticated()
    }

    /**
     * `.fishjam.PeerMessage.AuthRequest auth_request = 2;`
     */
    public var authRequest: fishjam.PeerNotifications.PeerMessage.AuthRequest
      @JvmName("getAuthRequest")
      get() = _builder.getAuthRequest()
      @JvmName("setAuthRequest")
      set(value) {
        _builder.setAuthRequest(value)
      }
    /**
     * `.fishjam.PeerMessage.AuthRequest auth_request = 2;`
     */
    public fun clearAuthRequest() {
      _builder.clearAuthRequest()
    }
    /**
     * `.fishjam.PeerMessage.AuthRequest auth_request = 2;`
     * @return Whether the authRequest field is set.
     */
    public fun hasAuthRequest(): kotlin.Boolean {
      return _builder.hasAuthRequest()
    }

    /**
     * `.fishjam.PeerMessage.MediaEvent media_event = 3;`
     */
    public var mediaEvent: fishjam.PeerNotifications.PeerMessage.MediaEvent
      @JvmName("getMediaEvent")
      get() = _builder.getMediaEvent()
      @JvmName("setMediaEvent")
      set(value) {
        _builder.setMediaEvent(value)
      }
    /**
     * `.fishjam.PeerMessage.MediaEvent media_event = 3;`
     */
    public fun clearMediaEvent() {
      _builder.clearMediaEvent()
    }
    /**
     * `.fishjam.PeerMessage.MediaEvent media_event = 3;`
     * @return Whether the mediaEvent field is set.
     */
    public fun hasMediaEvent(): kotlin.Boolean {
      return _builder.hasMediaEvent()
    }

    /**
     * `.fishjam.PeerMessage.RTCStatsReport rtc_stats_report = 4;`
     */
    public var rtcStatsReport: fishjam.PeerNotifications.PeerMessage.RTCStatsReport
      @JvmName("getRtcStatsReport")
      get() = _builder.getRtcStatsReport()
      @JvmName("setRtcStatsReport")
      set(value) {
        _builder.setRtcStatsReport(value)
      }
    /**
     * `.fishjam.PeerMessage.RTCStatsReport rtc_stats_report = 4;`
     */
    public fun clearRtcStatsReport() {
      _builder.clearRtcStatsReport()
    }
    /**
     * `.fishjam.PeerMessage.RTCStatsReport rtc_stats_report = 4;`
     * @return Whether the rtcStatsReport field is set.
     */
    public fun hasRtcStatsReport(): kotlin.Boolean {
      return _builder.hasRtcStatsReport()
    }

    /**
     * `.fishjam.media_events.peer.MediaEvent peer_media_event = 5;`
     */
    public var peerMediaEvent: fishjam.media_events.peer.Peer.MediaEvent
      @JvmName("getPeerMediaEvent")
      get() = _builder.getPeerMediaEvent()
      @JvmName("setPeerMediaEvent")
      set(value) {
        _builder.setPeerMediaEvent(value)
      }
    /**
     * `.fishjam.media_events.peer.MediaEvent peer_media_event = 5;`
     */
    public fun clearPeerMediaEvent() {
      _builder.clearPeerMediaEvent()
    }
    /**
     * `.fishjam.media_events.peer.MediaEvent peer_media_event = 5;`
     * @return Whether the peerMediaEvent field is set.
     */
    public fun hasPeerMediaEvent(): kotlin.Boolean {
      return _builder.hasPeerMediaEvent()
    }

    /**
     * `.fishjam.media_events.server.MediaEvent server_media_event = 6;`
     */
    public var serverMediaEvent: fishjam.media_events.server.Server.MediaEvent
      @JvmName("getServerMediaEvent")
      get() = _builder.getServerMediaEvent()
      @JvmName("setServerMediaEvent")
      set(value) {
        _builder.setServerMediaEvent(value)
      }
    /**
     * `.fishjam.media_events.server.MediaEvent server_media_event = 6;`
     */
    public fun clearServerMediaEvent() {
      _builder.clearServerMediaEvent()
    }
    /**
     * `.fishjam.media_events.server.MediaEvent server_media_event = 6;`
     * @return Whether the serverMediaEvent field is set.
     */
    public fun hasServerMediaEvent(): kotlin.Boolean {
      return _builder.hasServerMediaEvent()
    }
    public val contentCase: fishjam.PeerNotifications.PeerMessage.ContentCase
      @JvmName("getContentCase")
      get() = _builder.getContentCase()

    public fun clearContent() {
      _builder.clearContent()
    }
  }
  @kotlin.jvm.JvmName("-initializeauthenticated")
  public inline fun authenticated(block: fishjam.PeerMessageKt.AuthenticatedKt.Dsl.() -> kotlin.Unit): fishjam.PeerNotifications.PeerMessage.Authenticated =
    fishjam.PeerMessageKt.AuthenticatedKt.Dsl._create(fishjam.PeerNotifications.PeerMessage.Authenticated.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Response sent by FJ, confirming successful authentication
   * ```
   *
   * Protobuf type `fishjam.PeerMessage.Authenticated`
   */
  public object AuthenticatedKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.PeerNotifications.PeerMessage.Authenticated.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.PeerNotifications.PeerMessage.Authenticated.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.PeerNotifications.PeerMessage.Authenticated = _builder.build()

      /**
       * `.fishjam.PeerMessage.RoomType room_type = 1;`
       */
      public var roomType: fishjam.PeerNotifications.PeerMessage.RoomType
        @JvmName("getRoomType")
        get() = _builder.getRoomType()
        @JvmName("setRoomType")
        set(value) {
          _builder.setRoomType(value)
        }
      public var roomTypeValue: kotlin.Int
        @JvmName("getRoomTypeValue")
        get() = _builder.getRoomTypeValue()
        @JvmName("setRoomTypeValue")
        set(value) {
          _builder.setRoomTypeValue(value)
        }
      /**
       * `.fishjam.PeerMessage.RoomType room_type = 1;`
       */
      public fun clearRoomType() {
        _builder.clearRoomType()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializeauthRequest")
  public inline fun authRequest(block: fishjam.PeerMessageKt.AuthRequestKt.Dsl.() -> kotlin.Unit): fishjam.PeerNotifications.PeerMessage.AuthRequest =
    fishjam.PeerMessageKt.AuthRequestKt.Dsl._create(fishjam.PeerNotifications.PeerMessage.AuthRequest.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Request sent by peer, to authenticate to FJ server
   * ```
   *
   * Protobuf type `fishjam.PeerMessage.AuthRequest`
   */
  public object AuthRequestKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.PeerNotifications.PeerMessage.AuthRequest.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.PeerNotifications.PeerMessage.AuthRequest.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.PeerNotifications.PeerMessage.AuthRequest = _builder.build()

      /**
       * `string token = 1;`
       */
      public var token: kotlin.String
        @JvmName("getToken")
        get() = _builder.getToken()
        @JvmName("setToken")
        set(value) {
          _builder.setToken(value)
        }
      /**
       * `string token = 1;`
       */
      public fun clearToken() {
        _builder.clearToken()
      }

      /**
       * `string sdk_version = 2;`
       */
      public var sdkVersion: kotlin.String
        @JvmName("getSdkVersion")
        get() = _builder.getSdkVersion()
        @JvmName("setSdkVersion")
        set(value) {
          _builder.setSdkVersion(value)
        }
      /**
       * `string sdk_version = 2;`
       */
      public fun clearSdkVersion() {
        _builder.clearSdkVersion()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializerTCStatsReport")
  public inline fun rTCStatsReport(block: fishjam.PeerMessageKt.RTCStatsReportKt.Dsl.() -> kotlin.Unit): fishjam.PeerNotifications.PeerMessage.RTCStatsReport =
    fishjam.PeerMessageKt.RTCStatsReportKt.Dsl._create(fishjam.PeerNotifications.PeerMessage.RTCStatsReport.newBuilder()).apply { block() }._build()
  /**
   * ```
   * PeerConnection stats sent by peer
   * https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport#the_statistic_types
   * ```
   *
   * Protobuf type `fishjam.PeerMessage.RTCStatsReport`
   */
  public object RTCStatsReportKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.PeerNotifications.PeerMessage.RTCStatsReport.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.PeerNotifications.PeerMessage.RTCStatsReport.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.PeerNotifications.PeerMessage.RTCStatsReport = _builder.build()

      /**
       * `string data = 1;`
       */
      public var data: kotlin.String
        @JvmName("getData")
        get() = _builder.getData()
        @JvmName("setData")
        set(value) {
          _builder.setData(value)
        }
      /**
       * `string data = 1;`
       */
      public fun clearData() {
        _builder.clearData()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializemediaEvent")
  public inline fun mediaEvent(block: fishjam.PeerMessageKt.MediaEventKt.Dsl.() -> kotlin.Unit): fishjam.PeerNotifications.PeerMessage.MediaEvent =
    fishjam.PeerMessageKt.MediaEventKt.Dsl._create(fishjam.PeerNotifications.PeerMessage.MediaEvent.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Any type of WebRTC messages passed betweend FJ and peer
   * ```
   *
   * Protobuf type `fishjam.PeerMessage.MediaEvent`
   */
  public object MediaEventKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.PeerNotifications.PeerMessage.MediaEvent.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.PeerNotifications.PeerMessage.MediaEvent.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.PeerNotifications.PeerMessage.MediaEvent = _builder.build()

      /**
       * `string data = 1;`
       */
      public var data: kotlin.String
        @JvmName("getData")
        get() = _builder.getData()
        @JvmName("setData")
        set(value) {
          _builder.setData(value)
        }
      /**
       * `string data = 1;`
       */
      public fun clearData() {
        _builder.clearData()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun fishjam.PeerNotifications.PeerMessage.copy(block: `fishjam`.PeerMessageKt.Dsl.() -> kotlin.Unit): fishjam.PeerNotifications.PeerMessage =
  `fishjam`.PeerMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.PeerNotifications.PeerMessage.Authenticated.copy(block: `fishjam`.PeerMessageKt.AuthenticatedKt.Dsl.() -> kotlin.Unit): fishjam.PeerNotifications.PeerMessage.Authenticated =
  `fishjam`.PeerMessageKt.AuthenticatedKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.PeerNotifications.PeerMessage.AuthRequest.copy(block: `fishjam`.PeerMessageKt.AuthRequestKt.Dsl.() -> kotlin.Unit): fishjam.PeerNotifications.PeerMessage.AuthRequest =
  `fishjam`.PeerMessageKt.AuthRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.PeerNotifications.PeerMessage.RTCStatsReport.copy(block: `fishjam`.PeerMessageKt.RTCStatsReportKt.Dsl.() -> kotlin.Unit): fishjam.PeerNotifications.PeerMessage.RTCStatsReport =
  `fishjam`.PeerMessageKt.RTCStatsReportKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.PeerNotifications.PeerMessage.MediaEvent.copy(block: `fishjam`.PeerMessageKt.MediaEventKt.Dsl.() -> kotlin.Unit): fishjam.PeerNotifications.PeerMessage.MediaEvent =
  `fishjam`.PeerMessageKt.MediaEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val fishjam.PeerNotifications.PeerMessageOrBuilder.authenticatedOrNull: fishjam.PeerNotifications.PeerMessage.Authenticated?
  get() = if (hasAuthenticated()) getAuthenticated() else null

public val fishjam.PeerNotifications.PeerMessageOrBuilder.authRequestOrNull: fishjam.PeerNotifications.PeerMessage.AuthRequest?
  get() = if (hasAuthRequest()) getAuthRequest() else null

public val fishjam.PeerNotifications.PeerMessageOrBuilder.mediaEventOrNull: fishjam.PeerNotifications.PeerMessage.MediaEvent?
  get() = if (hasMediaEvent()) getMediaEvent() else null

public val fishjam.PeerNotifications.PeerMessageOrBuilder.rtcStatsReportOrNull: fishjam.PeerNotifications.PeerMessage.RTCStatsReport?
  get() = if (hasRtcStatsReport()) getRtcStatsReport() else null

public val fishjam.PeerNotifications.PeerMessageOrBuilder.peerMediaEventOrNull: fishjam.media_events.peer.Peer.MediaEvent?
  get() = if (hasPeerMediaEvent()) getPeerMediaEvent() else null

public val fishjam.PeerNotifications.PeerMessageOrBuilder.serverMediaEventOrNull: fishjam.media_events.server.Server.MediaEvent?
  get() = if (hasServerMediaEvent()) getServerMediaEvent() else null

