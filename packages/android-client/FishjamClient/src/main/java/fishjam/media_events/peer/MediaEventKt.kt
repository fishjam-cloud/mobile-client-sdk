// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: fishjam/media_events/peer/peer.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package fishjam.media_events.peer;

@kotlin.jvm.JvmName("-initializemediaEvent")
public inline fun mediaEvent(block: fishjam.media_events.peer.MediaEventKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent =
  fishjam.media_events.peer.MediaEventKt.Dsl._create(fishjam.media_events.peer.Peer.MediaEvent.newBuilder()).apply { block() }._build()
/**
 * ```
 * Defines any type of message sent from Peer to Membrane RTC Engine
 * ```
 *
 * Protobuf type `fishjam.media_events.peer.MediaEvent`
 */
public object MediaEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: fishjam.media_events.peer.Peer.MediaEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: fishjam.media_events.peer.Peer.MediaEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): fishjam.media_events.peer.Peer.MediaEvent = _builder.build()

    /**
     * `.fishjam.media_events.peer.MediaEvent.Connect connect = 1;`
     */
    public var connect: fishjam.media_events.peer.Peer.MediaEvent.Connect
      @JvmName("getConnect")
      get() = _builder.getConnect()
      @JvmName("setConnect")
      set(value) {
        _builder.setConnect(value)
      }
    /**
     * `.fishjam.media_events.peer.MediaEvent.Connect connect = 1;`
     */
    public fun clearConnect() {
      _builder.clearConnect()
    }
    /**
     * `.fishjam.media_events.peer.MediaEvent.Connect connect = 1;`
     * @return Whether the connect field is set.
     */
    public fun hasConnect(): kotlin.Boolean {
      return _builder.hasConnect()
    }

    /**
     * `.fishjam.media_events.peer.MediaEvent.Disconnect disconnect = 2;`
     */
    public var disconnect: fishjam.media_events.peer.Peer.MediaEvent.Disconnect
      @JvmName("getDisconnect")
      get() = _builder.getDisconnect()
      @JvmName("setDisconnect")
      set(value) {
        _builder.setDisconnect(value)
      }
    /**
     * `.fishjam.media_events.peer.MediaEvent.Disconnect disconnect = 2;`
     */
    public fun clearDisconnect() {
      _builder.clearDisconnect()
    }
    /**
     * `.fishjam.media_events.peer.MediaEvent.Disconnect disconnect = 2;`
     * @return Whether the disconnect field is set.
     */
    public fun hasDisconnect(): kotlin.Boolean {
      return _builder.hasDisconnect()
    }

    /**
     * `.fishjam.media_events.peer.MediaEvent.UpdateEndpointMetadata update_endpoint_metadata = 3;`
     */
    public var updateEndpointMetadata: fishjam.media_events.peer.Peer.MediaEvent.UpdateEndpointMetadata
      @JvmName("getUpdateEndpointMetadata")
      get() = _builder.getUpdateEndpointMetadata()
      @JvmName("setUpdateEndpointMetadata")
      set(value) {
        _builder.setUpdateEndpointMetadata(value)
      }
    /**
     * `.fishjam.media_events.peer.MediaEvent.UpdateEndpointMetadata update_endpoint_metadata = 3;`
     */
    public fun clearUpdateEndpointMetadata() {
      _builder.clearUpdateEndpointMetadata()
    }
    /**
     * `.fishjam.media_events.peer.MediaEvent.UpdateEndpointMetadata update_endpoint_metadata = 3;`
     * @return Whether the updateEndpointMetadata field is set.
     */
    public fun hasUpdateEndpointMetadata(): kotlin.Boolean {
      return _builder.hasUpdateEndpointMetadata()
    }

    /**
     * `.fishjam.media_events.peer.MediaEvent.UpdateTrackMetadata update_track_metadata = 4;`
     */
    public var updateTrackMetadata: fishjam.media_events.peer.Peer.MediaEvent.UpdateTrackMetadata
      @JvmName("getUpdateTrackMetadata")
      get() = _builder.getUpdateTrackMetadata()
      @JvmName("setUpdateTrackMetadata")
      set(value) {
        _builder.setUpdateTrackMetadata(value)
      }
    /**
     * `.fishjam.media_events.peer.MediaEvent.UpdateTrackMetadata update_track_metadata = 4;`
     */
    public fun clearUpdateTrackMetadata() {
      _builder.clearUpdateTrackMetadata()
    }
    /**
     * `.fishjam.media_events.peer.MediaEvent.UpdateTrackMetadata update_track_metadata = 4;`
     * @return Whether the updateTrackMetadata field is set.
     */
    public fun hasUpdateTrackMetadata(): kotlin.Boolean {
      return _builder.hasUpdateTrackMetadata()
    }

    /**
     * `.fishjam.media_events.peer.MediaEvent.RenegotiateTracks renegotiate_tracks = 5;`
     */
    public var renegotiateTracks: fishjam.media_events.peer.Peer.MediaEvent.RenegotiateTracks
      @JvmName("getRenegotiateTracks")
      get() = _builder.getRenegotiateTracks()
      @JvmName("setRenegotiateTracks")
      set(value) {
        _builder.setRenegotiateTracks(value)
      }
    /**
     * `.fishjam.media_events.peer.MediaEvent.RenegotiateTracks renegotiate_tracks = 5;`
     */
    public fun clearRenegotiateTracks() {
      _builder.clearRenegotiateTracks()
    }
    /**
     * `.fishjam.media_events.peer.MediaEvent.RenegotiateTracks renegotiate_tracks = 5;`
     * @return Whether the renegotiateTracks field is set.
     */
    public fun hasRenegotiateTracks(): kotlin.Boolean {
      return _builder.hasRenegotiateTracks()
    }

    /**
     * `.fishjam.media_events.Candidate candidate = 6;`
     */
    public var candidate: fishjam.media_events.Shared.Candidate
      @JvmName("getCandidate")
      get() = _builder.getCandidate()
      @JvmName("setCandidate")
      set(value) {
        _builder.setCandidate(value)
      }
    /**
     * `.fishjam.media_events.Candidate candidate = 6;`
     */
    public fun clearCandidate() {
      _builder.clearCandidate()
    }
    /**
     * `.fishjam.media_events.Candidate candidate = 6;`
     * @return Whether the candidate field is set.
     */
    public fun hasCandidate(): kotlin.Boolean {
      return _builder.hasCandidate()
    }

    /**
     * `.fishjam.media_events.peer.MediaEvent.SdpOffer sdp_offer = 7;`
     */
    public var sdpOffer: fishjam.media_events.peer.Peer.MediaEvent.SdpOffer
      @JvmName("getSdpOffer")
      get() = _builder.getSdpOffer()
      @JvmName("setSdpOffer")
      set(value) {
        _builder.setSdpOffer(value)
      }
    /**
     * `.fishjam.media_events.peer.MediaEvent.SdpOffer sdp_offer = 7;`
     */
    public fun clearSdpOffer() {
      _builder.clearSdpOffer()
    }
    /**
     * `.fishjam.media_events.peer.MediaEvent.SdpOffer sdp_offer = 7;`
     * @return Whether the sdpOffer field is set.
     */
    public fun hasSdpOffer(): kotlin.Boolean {
      return _builder.hasSdpOffer()
    }

    /**
     * `.fishjam.media_events.peer.MediaEvent.TrackBitrate track_bitrate = 8;`
     */
    public var trackBitrate: fishjam.media_events.peer.Peer.MediaEvent.TrackBitrate
      @JvmName("getTrackBitrate")
      get() = _builder.getTrackBitrate()
      @JvmName("setTrackBitrate")
      set(value) {
        _builder.setTrackBitrate(value)
      }
    /**
     * `.fishjam.media_events.peer.MediaEvent.TrackBitrate track_bitrate = 8;`
     */
    public fun clearTrackBitrate() {
      _builder.clearTrackBitrate()
    }
    /**
     * `.fishjam.media_events.peer.MediaEvent.TrackBitrate track_bitrate = 8;`
     * @return Whether the trackBitrate field is set.
     */
    public fun hasTrackBitrate(): kotlin.Boolean {
      return _builder.hasTrackBitrate()
    }
    public val contentCase: fishjam.media_events.peer.Peer.MediaEvent.ContentCase
      @JvmName("getContentCase")
      get() = _builder.getContentCase()

    public fun clearContent() {
      _builder.clearContent()
    }
  }
  @kotlin.jvm.JvmName("-initializevariantBitrate")
  public inline fun variantBitrate(block: fishjam.media_events.peer.MediaEventKt.VariantBitrateKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.VariantBitrate =
    fishjam.media_events.peer.MediaEventKt.VariantBitrateKt.Dsl._create(fishjam.media_events.peer.Peer.MediaEvent.VariantBitrate.newBuilder()).apply { block() }._build()
  /**
   * ```
   * SCHEMAS
   * ```
   *
   * Protobuf type `fishjam.media_events.peer.MediaEvent.VariantBitrate`
   */
  public object VariantBitrateKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.peer.Peer.MediaEvent.VariantBitrate.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.peer.Peer.MediaEvent.VariantBitrate.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.peer.Peer.MediaEvent.VariantBitrate = _builder.build()

      /**
       * `.fishjam.media_events.Variant variant = 1;`
       */
      public var variant: fishjam.media_events.Shared.Variant
        @JvmName("getVariant")
        get() = _builder.getVariant()
        @JvmName("setVariant")
        set(value) {
          _builder.setVariant(value)
        }
      public var variantValue: kotlin.Int
        @JvmName("getVariantValue")
        get() = _builder.getVariantValue()
        @JvmName("setVariantValue")
        set(value) {
          _builder.setVariantValue(value)
        }
      /**
       * `.fishjam.media_events.Variant variant = 1;`
       */
      public fun clearVariant() {
        _builder.clearVariant()
      }

      /**
       * `int32 bitrate = 2;`
       */
      public var bitrate: kotlin.Int
        @JvmName("getBitrate")
        get() = _builder.getBitrate()
        @JvmName("setBitrate")
        set(value) {
          _builder.setBitrate(value)
        }
      /**
       * `int32 bitrate = 2;`
       */
      public fun clearBitrate() {
        _builder.clearBitrate()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializetrackIdToMetadata")
  public inline fun trackIdToMetadata(block: fishjam.media_events.peer.MediaEventKt.TrackIdToMetadataKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata =
    fishjam.media_events.peer.MediaEventKt.TrackIdToMetadataKt.Dsl._create(fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `fishjam.media_events.peer.MediaEvent.TrackIdToMetadata`
   */
  public object TrackIdToMetadataKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata = _builder.build()

      /**
       * `string track_id = 1;`
       */
      public var trackId: kotlin.String
        @JvmName("getTrackId")
        get() = _builder.getTrackId()
        @JvmName("setTrackId")
        set(value) {
          _builder.setTrackId(value)
        }
      /**
       * `string track_id = 1;`
       */
      public fun clearTrackId() {
        _builder.clearTrackId()
      }

      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       */
      public var metadata: fishjam.media_events.Shared.Metadata
        @JvmName("getMetadata")
        get() = _builder.getMetadata()
        @JvmName("setMetadata")
        set(value) {
          _builder.setMetadata(value)
        }
      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       */
      public fun clearMetadata() {
        _builder.clearMetadata()
      }
      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       * @return Whether the metadata field is set.
       */
      public fun hasMetadata(): kotlin.Boolean {
        return _builder.hasMetadata()
      }
      public val TrackIdToMetadataKt.Dsl.metadataOrNull: fishjam.media_events.Shared.Metadata?
        get() = _builder.metadataOrNull
    }
  }
  @kotlin.jvm.JvmName("-initializetrackIdToBitrates")
  public inline fun trackIdToBitrates(block: fishjam.media_events.peer.MediaEventKt.TrackIdToBitratesKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates =
    fishjam.media_events.peer.MediaEventKt.TrackIdToBitratesKt.Dsl._create(fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `fishjam.media_events.peer.MediaEvent.TrackIdToBitrates`
   */
  public object TrackIdToBitratesKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates = _builder.build()

      /**
       * `.fishjam.media_events.peer.MediaEvent.TrackBitrate track_bitrate = 1;`
       */
      public var trackBitrate: fishjam.media_events.peer.Peer.MediaEvent.TrackBitrate
        @JvmName("getTrackBitrate")
        get() = _builder.getTrackBitrate()
        @JvmName("setTrackBitrate")
        set(value) {
          _builder.setTrackBitrate(value)
        }
      /**
       * `.fishjam.media_events.peer.MediaEvent.TrackBitrate track_bitrate = 1;`
       */
      public fun clearTrackBitrate() {
        _builder.clearTrackBitrate()
      }
      /**
       * `.fishjam.media_events.peer.MediaEvent.TrackBitrate track_bitrate = 1;`
       * @return Whether the trackBitrate field is set.
       */
      public fun hasTrackBitrate(): kotlin.Boolean {
        return _builder.hasTrackBitrate()
      }
      public val tracksCase: fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates.TracksCase
        @JvmName("getTracksCase")
        get() = _builder.getTracksCase()

      public fun clearTracks() {
        _builder.clearTracks()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializeconnect")
  public inline fun connect(block: fishjam.media_events.peer.MediaEventKt.ConnectKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.Connect =
    fishjam.media_events.peer.MediaEventKt.ConnectKt.Dsl._create(fishjam.media_events.peer.Peer.MediaEvent.Connect.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent when a peer wants to join WebRTC Endpoint.
   * ```
   *
   * Protobuf type `fishjam.media_events.peer.MediaEvent.Connect`
   */
  public object ConnectKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.peer.Peer.MediaEvent.Connect.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.peer.Peer.MediaEvent.Connect.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.peer.Peer.MediaEvent.Connect = _builder.build()

      /**
       * `.fishjam.media_events.Metadata metadata = 1;`
       */
      public var metadata: fishjam.media_events.Shared.Metadata
        @JvmName("getMetadata")
        get() = _builder.getMetadata()
        @JvmName("setMetadata")
        set(value) {
          _builder.setMetadata(value)
        }
      /**
       * `.fishjam.media_events.Metadata metadata = 1;`
       */
      public fun clearMetadata() {
        _builder.clearMetadata()
      }
      /**
       * `.fishjam.media_events.Metadata metadata = 1;`
       * @return Whether the metadata field is set.
       */
      public fun hasMetadata(): kotlin.Boolean {
        return _builder.hasMetadata()
      }
      public val ConnectKt.Dsl.metadataOrNull: fishjam.media_events.Shared.Metadata?
        get() = _builder.metadataOrNull
    }
  }
  @kotlin.jvm.JvmName("-initializedisconnect")
  public inline fun disconnect(block: fishjam.media_events.peer.MediaEventKt.DisconnectKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.Disconnect =
    fishjam.media_events.peer.MediaEventKt.DisconnectKt.Dsl._create(fishjam.media_events.peer.Peer.MediaEvent.Disconnect.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent when a peer disconnects from WebRTC Endpoint.
   * ```
   *
   * Protobuf type `fishjam.media_events.peer.MediaEvent.Disconnect`
   */
  public object DisconnectKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.peer.Peer.MediaEvent.Disconnect.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.peer.Peer.MediaEvent.Disconnect.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.peer.Peer.MediaEvent.Disconnect = _builder.build()
    }
  }
  @kotlin.jvm.JvmName("-initializeupdateEndpointMetadata")
  public inline fun updateEndpointMetadata(block: fishjam.media_events.peer.MediaEventKt.UpdateEndpointMetadataKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.UpdateEndpointMetadata =
    fishjam.media_events.peer.MediaEventKt.UpdateEndpointMetadataKt.Dsl._create(fishjam.media_events.peer.Peer.MediaEvent.UpdateEndpointMetadata.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent when a peer wants to update its metadata
   * ```
   *
   * Protobuf type `fishjam.media_events.peer.MediaEvent.UpdateEndpointMetadata`
   */
  public object UpdateEndpointMetadataKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.peer.Peer.MediaEvent.UpdateEndpointMetadata.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.peer.Peer.MediaEvent.UpdateEndpointMetadata.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.peer.Peer.MediaEvent.UpdateEndpointMetadata = _builder.build()

      /**
       * `.fishjam.media_events.Metadata metadata = 1;`
       */
      public var metadata: fishjam.media_events.Shared.Metadata
        @JvmName("getMetadata")
        get() = _builder.getMetadata()
        @JvmName("setMetadata")
        set(value) {
          _builder.setMetadata(value)
        }
      /**
       * `.fishjam.media_events.Metadata metadata = 1;`
       */
      public fun clearMetadata() {
        _builder.clearMetadata()
      }
      /**
       * `.fishjam.media_events.Metadata metadata = 1;`
       * @return Whether the metadata field is set.
       */
      public fun hasMetadata(): kotlin.Boolean {
        return _builder.hasMetadata()
      }
      public val UpdateEndpointMetadataKt.Dsl.metadataOrNull: fishjam.media_events.Shared.Metadata?
        get() = _builder.metadataOrNull
    }
  }
  @kotlin.jvm.JvmName("-initializeupdateTrackMetadata")
  public inline fun updateTrackMetadata(block: fishjam.media_events.peer.MediaEventKt.UpdateTrackMetadataKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.UpdateTrackMetadata =
    fishjam.media_events.peer.MediaEventKt.UpdateTrackMetadataKt.Dsl._create(fishjam.media_events.peer.Peer.MediaEvent.UpdateTrackMetadata.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent when a peer wants to update its track's metadata
   * ```
   *
   * Protobuf type `fishjam.media_events.peer.MediaEvent.UpdateTrackMetadata`
   */
  public object UpdateTrackMetadataKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.peer.Peer.MediaEvent.UpdateTrackMetadata.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.peer.Peer.MediaEvent.UpdateTrackMetadata.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.peer.Peer.MediaEvent.UpdateTrackMetadata = _builder.build()

      /**
       * `string track_id = 1;`
       */
      public var trackId: kotlin.String
        @JvmName("getTrackId")
        get() = _builder.getTrackId()
        @JvmName("setTrackId")
        set(value) {
          _builder.setTrackId(value)
        }
      /**
       * `string track_id = 1;`
       */
      public fun clearTrackId() {
        _builder.clearTrackId()
      }

      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       */
      public var metadata: fishjam.media_events.Shared.Metadata
        @JvmName("getMetadata")
        get() = _builder.getMetadata()
        @JvmName("setMetadata")
        set(value) {
          _builder.setMetadata(value)
        }
      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       */
      public fun clearMetadata() {
        _builder.clearMetadata()
      }
      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       * @return Whether the metadata field is set.
       */
      public fun hasMetadata(): kotlin.Boolean {
        return _builder.hasMetadata()
      }
      public val UpdateTrackMetadataKt.Dsl.metadataOrNull: fishjam.media_events.Shared.Metadata?
        get() = _builder.metadataOrNull
    }
  }
  @kotlin.jvm.JvmName("-initializerenegotiateTracks")
  public inline fun renegotiateTracks(block: fishjam.media_events.peer.MediaEventKt.RenegotiateTracksKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.RenegotiateTracks =
    fishjam.media_events.peer.MediaEventKt.RenegotiateTracksKt.Dsl._create(fishjam.media_events.peer.Peer.MediaEvent.RenegotiateTracks.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent when peer wants to renegatiate connection due to adding a track or removing a track
   * ```
   *
   * Protobuf type `fishjam.media_events.peer.MediaEvent.RenegotiateTracks`
   */
  public object RenegotiateTracksKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.peer.Peer.MediaEvent.RenegotiateTracks.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.peer.Peer.MediaEvent.RenegotiateTracks.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.peer.Peer.MediaEvent.RenegotiateTracks = _builder.build()
    }
  }
  @kotlin.jvm.JvmName("-initializesdpOffer")
  public inline fun sdpOffer(block: fishjam.media_events.peer.MediaEventKt.SdpOfferKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.SdpOffer =
    fishjam.media_events.peer.MediaEventKt.SdpOfferKt.Dsl._create(fishjam.media_events.peer.Peer.MediaEvent.SdpOffer.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent as a response to `offerData` media event during renegotiation
   * Maps contain only information about current peer's `sendonly` tracks.
   * The "mid" is an identifier used to associate an RTP packet with an MLine from the SDP offer/answer.
   * ```
   *
   * Protobuf type `fishjam.media_events.peer.MediaEvent.SdpOffer`
   */
  public object SdpOfferKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.peer.Peer.MediaEvent.SdpOffer.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.peer.Peer.MediaEvent.SdpOffer.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.peer.Peer.MediaEvent.SdpOffer = _builder.build()

      /**
       * `string sdp_offer = 1;`
       */
      public var sdpOffer: kotlin.String
        @JvmName("getSdpOffer")
        get() = _builder.getSdpOffer()
        @JvmName("setSdpOffer")
        set(value) {
          _builder.setSdpOffer(value)
        }
      /**
       * `string sdp_offer = 1;`
       */
      public fun clearSdpOffer() {
        _builder.clearSdpOffer()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class TrackIdToMetadataProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * `repeated .fishjam.media_events.peer.MediaEvent.TrackIdToMetadata track_id_to_metadata = 2;`
       */
       public val trackIdToMetadata: com.google.protobuf.kotlin.DslList<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata, TrackIdToMetadataProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getTrackIdToMetadataList()
        )
      /**
       * `repeated .fishjam.media_events.peer.MediaEvent.TrackIdToMetadata track_id_to_metadata = 2;`
       * @param value The trackIdToMetadata to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addTrackIdToMetadata")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata, TrackIdToMetadataProxy>.add(value: fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata) {
        _builder.addTrackIdToMetadata(value)
      }
      /**
       * `repeated .fishjam.media_events.peer.MediaEvent.TrackIdToMetadata track_id_to_metadata = 2;`
       * @param value The trackIdToMetadata to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignTrackIdToMetadata")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata, TrackIdToMetadataProxy>.plusAssign(value: fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata) {
        add(value)
      }
      /**
       * `repeated .fishjam.media_events.peer.MediaEvent.TrackIdToMetadata track_id_to_metadata = 2;`
       * @param values The trackIdToMetadata to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllTrackIdToMetadata")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata, TrackIdToMetadataProxy>.addAll(values: kotlin.collections.Iterable<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata>) {
        _builder.addAllTrackIdToMetadata(values)
      }
      /**
       * `repeated .fishjam.media_events.peer.MediaEvent.TrackIdToMetadata track_id_to_metadata = 2;`
       * @param values The trackIdToMetadata to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllTrackIdToMetadata")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata, TrackIdToMetadataProxy>.plusAssign(values: kotlin.collections.Iterable<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata>) {
        addAll(values)
      }
      /**
       * `repeated .fishjam.media_events.peer.MediaEvent.TrackIdToMetadata track_id_to_metadata = 2;`
       * @param index The index to set the value at.
       * @param value The trackIdToMetadata to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setTrackIdToMetadata")
      public operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata, TrackIdToMetadataProxy>.set(index: kotlin.Int, value: fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata) {
        _builder.setTrackIdToMetadata(index, value)
      }
      /**
       * `repeated .fishjam.media_events.peer.MediaEvent.TrackIdToMetadata track_id_to_metadata = 2;`
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearTrackIdToMetadata")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata, TrackIdToMetadataProxy>.clear() {
        _builder.clearTrackIdToMetadata()
      }


      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class TrackIdToBitratesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * `repeated .fishjam.media_events.peer.MediaEvent.TrackIdToBitrates track_id_to_bitrates = 3;`
       */
       public val trackIdToBitrates: com.google.protobuf.kotlin.DslList<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates, TrackIdToBitratesProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getTrackIdToBitratesList()
        )
      /**
       * `repeated .fishjam.media_events.peer.MediaEvent.TrackIdToBitrates track_id_to_bitrates = 3;`
       * @param value The trackIdToBitrates to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addTrackIdToBitrates")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates, TrackIdToBitratesProxy>.add(value: fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates) {
        _builder.addTrackIdToBitrates(value)
      }
      /**
       * `repeated .fishjam.media_events.peer.MediaEvent.TrackIdToBitrates track_id_to_bitrates = 3;`
       * @param value The trackIdToBitrates to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignTrackIdToBitrates")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates, TrackIdToBitratesProxy>.plusAssign(value: fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates) {
        add(value)
      }
      /**
       * `repeated .fishjam.media_events.peer.MediaEvent.TrackIdToBitrates track_id_to_bitrates = 3;`
       * @param values The trackIdToBitrates to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllTrackIdToBitrates")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates, TrackIdToBitratesProxy>.addAll(values: kotlin.collections.Iterable<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates>) {
        _builder.addAllTrackIdToBitrates(values)
      }
      /**
       * `repeated .fishjam.media_events.peer.MediaEvent.TrackIdToBitrates track_id_to_bitrates = 3;`
       * @param values The trackIdToBitrates to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllTrackIdToBitrates")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates, TrackIdToBitratesProxy>.plusAssign(values: kotlin.collections.Iterable<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates>) {
        addAll(values)
      }
      /**
       * `repeated .fishjam.media_events.peer.MediaEvent.TrackIdToBitrates track_id_to_bitrates = 3;`
       * @param index The index to set the value at.
       * @param value The trackIdToBitrates to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setTrackIdToBitrates")
      public operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates, TrackIdToBitratesProxy>.set(index: kotlin.Int, value: fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates) {
        _builder.setTrackIdToBitrates(index, value)
      }
      /**
       * `repeated .fishjam.media_events.peer.MediaEvent.TrackIdToBitrates track_id_to_bitrates = 3;`
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearTrackIdToBitrates")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates, TrackIdToBitratesProxy>.clear() {
        _builder.clearTrackIdToBitrates()
      }


      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class MidToTrackIdProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * `repeated .fishjam.media_events.MidToTrackId mid_to_track_id = 4;`
       */
       public val midToTrackId: com.google.protobuf.kotlin.DslList<fishjam.media_events.Shared.MidToTrackId, MidToTrackIdProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getMidToTrackIdList()
        )
      /**
       * `repeated .fishjam.media_events.MidToTrackId mid_to_track_id = 4;`
       * @param value The midToTrackId to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addMidToTrackId")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.Shared.MidToTrackId, MidToTrackIdProxy>.add(value: fishjam.media_events.Shared.MidToTrackId) {
        _builder.addMidToTrackId(value)
      }
      /**
       * `repeated .fishjam.media_events.MidToTrackId mid_to_track_id = 4;`
       * @param value The midToTrackId to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignMidToTrackId")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.Shared.MidToTrackId, MidToTrackIdProxy>.plusAssign(value: fishjam.media_events.Shared.MidToTrackId) {
        add(value)
      }
      /**
       * `repeated .fishjam.media_events.MidToTrackId mid_to_track_id = 4;`
       * @param values The midToTrackId to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllMidToTrackId")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.Shared.MidToTrackId, MidToTrackIdProxy>.addAll(values: kotlin.collections.Iterable<fishjam.media_events.Shared.MidToTrackId>) {
        _builder.addAllMidToTrackId(values)
      }
      /**
       * `repeated .fishjam.media_events.MidToTrackId mid_to_track_id = 4;`
       * @param values The midToTrackId to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllMidToTrackId")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.Shared.MidToTrackId, MidToTrackIdProxy>.plusAssign(values: kotlin.collections.Iterable<fishjam.media_events.Shared.MidToTrackId>) {
        addAll(values)
      }
      /**
       * `repeated .fishjam.media_events.MidToTrackId mid_to_track_id = 4;`
       * @param index The index to set the value at.
       * @param value The midToTrackId to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setMidToTrackId")
      public operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.Shared.MidToTrackId, MidToTrackIdProxy>.set(index: kotlin.Int, value: fishjam.media_events.Shared.MidToTrackId) {
        _builder.setMidToTrackId(index, value)
      }
      /**
       * `repeated .fishjam.media_events.MidToTrackId mid_to_track_id = 4;`
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearMidToTrackId")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.Shared.MidToTrackId, MidToTrackIdProxy>.clear() {
        _builder.clearMidToTrackId()
      }

    }
  }
  @kotlin.jvm.JvmName("-initializetrackBitrate")
  public inline fun trackBitrate(block: fishjam.media_events.peer.MediaEventKt.TrackBitrateKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.TrackBitrate =
    fishjam.media_events.peer.MediaEventKt.TrackBitrateKt.Dsl._create(fishjam.media_events.peer.Peer.MediaEvent.TrackBitrate.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent when Peer wants to update its track's bitrate
   * ```
   *
   * Protobuf type `fishjam.media_events.peer.MediaEvent.TrackBitrate`
   */
  public object TrackBitrateKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.peer.Peer.MediaEvent.TrackBitrate.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.peer.Peer.MediaEvent.TrackBitrate.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.peer.Peer.MediaEvent.TrackBitrate = _builder.build()

      /**
       * `string track_id = 1;`
       */
      public var trackId: kotlin.String
        @JvmName("getTrackId")
        get() = _builder.getTrackId()
        @JvmName("setTrackId")
        set(value) {
          _builder.setTrackId(value)
        }
      /**
       * `string track_id = 1;`
       */
      public fun clearTrackId() {
        _builder.clearTrackId()
      }

      /**
       * `int32 bitrate = 2;`
       */
      public var bitrate: kotlin.Int
        @JvmName("getBitrate")
        get() = _builder.getBitrate()
        @JvmName("setBitrate")
        set(value) {
          _builder.setBitrate(value)
        }
      /**
       * `int32 bitrate = 2;`
       */
      public fun clearBitrate() {
        _builder.clearBitrate()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.peer.Peer.MediaEvent.copy(block: `fishjam.media_events.peer`.MediaEventKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent =
  `fishjam.media_events.peer`.MediaEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.peer.Peer.MediaEvent.VariantBitrate.copy(block: `fishjam.media_events.peer`.MediaEventKt.VariantBitrateKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.VariantBitrate =
  `fishjam.media_events.peer`.MediaEventKt.VariantBitrateKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata.copy(block: `fishjam.media_events.peer`.MediaEventKt.TrackIdToMetadataKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadata =
  `fishjam.media_events.peer`.MediaEventKt.TrackIdToMetadataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val fishjam.media_events.peer.Peer.MediaEvent.TrackIdToMetadataOrBuilder.metadataOrNull: fishjam.media_events.Shared.Metadata?
  get() = if (hasMetadata()) getMetadata() else null

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates.copy(block: `fishjam.media_events.peer`.MediaEventKt.TrackIdToBitratesKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitrates =
  `fishjam.media_events.peer`.MediaEventKt.TrackIdToBitratesKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val fishjam.media_events.peer.Peer.MediaEvent.TrackIdToBitratesOrBuilder.trackBitrateOrNull: fishjam.media_events.peer.Peer.MediaEvent.TrackBitrate?
  get() = if (hasTrackBitrate()) getTrackBitrate() else null

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.peer.Peer.MediaEvent.Connect.copy(block: `fishjam.media_events.peer`.MediaEventKt.ConnectKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.Connect =
  `fishjam.media_events.peer`.MediaEventKt.ConnectKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val fishjam.media_events.peer.Peer.MediaEvent.ConnectOrBuilder.metadataOrNull: fishjam.media_events.Shared.Metadata?
  get() = if (hasMetadata()) getMetadata() else null

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.peer.Peer.MediaEvent.Disconnect.copy(block: `fishjam.media_events.peer`.MediaEventKt.DisconnectKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.Disconnect =
  `fishjam.media_events.peer`.MediaEventKt.DisconnectKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.peer.Peer.MediaEvent.UpdateEndpointMetadata.copy(block: `fishjam.media_events.peer`.MediaEventKt.UpdateEndpointMetadataKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.UpdateEndpointMetadata =
  `fishjam.media_events.peer`.MediaEventKt.UpdateEndpointMetadataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val fishjam.media_events.peer.Peer.MediaEvent.UpdateEndpointMetadataOrBuilder.metadataOrNull: fishjam.media_events.Shared.Metadata?
  get() = if (hasMetadata()) getMetadata() else null

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.peer.Peer.MediaEvent.UpdateTrackMetadata.copy(block: `fishjam.media_events.peer`.MediaEventKt.UpdateTrackMetadataKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.UpdateTrackMetadata =
  `fishjam.media_events.peer`.MediaEventKt.UpdateTrackMetadataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val fishjam.media_events.peer.Peer.MediaEvent.UpdateTrackMetadataOrBuilder.metadataOrNull: fishjam.media_events.Shared.Metadata?
  get() = if (hasMetadata()) getMetadata() else null

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.peer.Peer.MediaEvent.RenegotiateTracks.copy(block: `fishjam.media_events.peer`.MediaEventKt.RenegotiateTracksKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.RenegotiateTracks =
  `fishjam.media_events.peer`.MediaEventKt.RenegotiateTracksKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.peer.Peer.MediaEvent.SdpOffer.copy(block: `fishjam.media_events.peer`.MediaEventKt.SdpOfferKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.SdpOffer =
  `fishjam.media_events.peer`.MediaEventKt.SdpOfferKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.peer.Peer.MediaEvent.TrackBitrate.copy(block: `fishjam.media_events.peer`.MediaEventKt.TrackBitrateKt.Dsl.() -> kotlin.Unit): fishjam.media_events.peer.Peer.MediaEvent.TrackBitrate =
  `fishjam.media_events.peer`.MediaEventKt.TrackBitrateKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val fishjam.media_events.peer.Peer.MediaEventOrBuilder.connectOrNull: fishjam.media_events.peer.Peer.MediaEvent.Connect?
  get() = if (hasConnect()) getConnect() else null

public val fishjam.media_events.peer.Peer.MediaEventOrBuilder.disconnectOrNull: fishjam.media_events.peer.Peer.MediaEvent.Disconnect?
  get() = if (hasDisconnect()) getDisconnect() else null

public val fishjam.media_events.peer.Peer.MediaEventOrBuilder.updateEndpointMetadataOrNull: fishjam.media_events.peer.Peer.MediaEvent.UpdateEndpointMetadata?
  get() = if (hasUpdateEndpointMetadata()) getUpdateEndpointMetadata() else null

public val fishjam.media_events.peer.Peer.MediaEventOrBuilder.updateTrackMetadataOrNull: fishjam.media_events.peer.Peer.MediaEvent.UpdateTrackMetadata?
  get() = if (hasUpdateTrackMetadata()) getUpdateTrackMetadata() else null

public val fishjam.media_events.peer.Peer.MediaEventOrBuilder.renegotiateTracksOrNull: fishjam.media_events.peer.Peer.MediaEvent.RenegotiateTracks?
  get() = if (hasRenegotiateTracks()) getRenegotiateTracks() else null

public val fishjam.media_events.peer.Peer.MediaEventOrBuilder.candidateOrNull: fishjam.media_events.Shared.Candidate?
  get() = if (hasCandidate()) getCandidate() else null

public val fishjam.media_events.peer.Peer.MediaEventOrBuilder.sdpOfferOrNull: fishjam.media_events.peer.Peer.MediaEvent.SdpOffer?
  get() = if (hasSdpOffer()) getSdpOffer() else null

public val fishjam.media_events.peer.Peer.MediaEventOrBuilder.trackBitrateOrNull: fishjam.media_events.peer.Peer.MediaEvent.TrackBitrate?
  get() = if (hasTrackBitrate()) getTrackBitrate() else null

