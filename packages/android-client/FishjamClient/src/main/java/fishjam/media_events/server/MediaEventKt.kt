// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: fishjam/media_events/server/server.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package fishjam.media_events.server;

@kotlin.jvm.JvmName("-initializemediaEvent")
public inline fun mediaEvent(block: fishjam.media_events.server.MediaEventKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent =
  fishjam.media_events.server.MediaEventKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.newBuilder()).apply { block() }._build()
/**
 * ```
 * Defines any type of message sent from Membrane RTC Engine to Peer
 * ```
 *
 * Protobuf type `fishjam.media_events.server.MediaEvent`
 */
public object MediaEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: fishjam.media_events.server.Server.MediaEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): fishjam.media_events.server.Server.MediaEvent = _builder.build()

    /**
     * `.fishjam.media_events.server.MediaEvent.EndpointUpdated endpoint_updated = 1;`
     */
    public var endpointUpdated: fishjam.media_events.server.Server.MediaEvent.EndpointUpdated
      @JvmName("getEndpointUpdated")
      get() = _builder.getEndpointUpdated()
      @JvmName("setEndpointUpdated")
      set(value) {
        _builder.setEndpointUpdated(value)
      }
    /**
     * `.fishjam.media_events.server.MediaEvent.EndpointUpdated endpoint_updated = 1;`
     */
    public fun clearEndpointUpdated() {
      _builder.clearEndpointUpdated()
    }
    /**
     * `.fishjam.media_events.server.MediaEvent.EndpointUpdated endpoint_updated = 1;`
     * @return Whether the endpointUpdated field is set.
     */
    public fun hasEndpointUpdated(): kotlin.Boolean {
      return _builder.hasEndpointUpdated()
    }

    /**
     * `.fishjam.media_events.server.MediaEvent.TrackUpdated track_updated = 2;`
     */
    public var trackUpdated: fishjam.media_events.server.Server.MediaEvent.TrackUpdated
      @JvmName("getTrackUpdated")
      get() = _builder.getTrackUpdated()
      @JvmName("setTrackUpdated")
      set(value) {
        _builder.setTrackUpdated(value)
      }
    /**
     * `.fishjam.media_events.server.MediaEvent.TrackUpdated track_updated = 2;`
     */
    public fun clearTrackUpdated() {
      _builder.clearTrackUpdated()
    }
    /**
     * `.fishjam.media_events.server.MediaEvent.TrackUpdated track_updated = 2;`
     * @return Whether the trackUpdated field is set.
     */
    public fun hasTrackUpdated(): kotlin.Boolean {
      return _builder.hasTrackUpdated()
    }

    /**
     * `.fishjam.media_events.server.MediaEvent.TracksAdded tracks_added = 3;`
     */
    public var tracksAdded: fishjam.media_events.server.Server.MediaEvent.TracksAdded
      @JvmName("getTracksAdded")
      get() = _builder.getTracksAdded()
      @JvmName("setTracksAdded")
      set(value) {
        _builder.setTracksAdded(value)
      }
    /**
     * `.fishjam.media_events.server.MediaEvent.TracksAdded tracks_added = 3;`
     */
    public fun clearTracksAdded() {
      _builder.clearTracksAdded()
    }
    /**
     * `.fishjam.media_events.server.MediaEvent.TracksAdded tracks_added = 3;`
     * @return Whether the tracksAdded field is set.
     */
    public fun hasTracksAdded(): kotlin.Boolean {
      return _builder.hasTracksAdded()
    }

    /**
     * `.fishjam.media_events.server.MediaEvent.TracksRemoved tracks_removed = 4;`
     */
    public var tracksRemoved: fishjam.media_events.server.Server.MediaEvent.TracksRemoved
      @JvmName("getTracksRemoved")
      get() = _builder.getTracksRemoved()
      @JvmName("setTracksRemoved")
      set(value) {
        _builder.setTracksRemoved(value)
      }
    /**
     * `.fishjam.media_events.server.MediaEvent.TracksRemoved tracks_removed = 4;`
     */
    public fun clearTracksRemoved() {
      _builder.clearTracksRemoved()
    }
    /**
     * `.fishjam.media_events.server.MediaEvent.TracksRemoved tracks_removed = 4;`
     * @return Whether the tracksRemoved field is set.
     */
    public fun hasTracksRemoved(): kotlin.Boolean {
      return _builder.hasTracksRemoved()
    }

    /**
     * `.fishjam.media_events.server.MediaEvent.EndpointAdded endpoint_added = 5;`
     */
    public var endpointAdded: fishjam.media_events.server.Server.MediaEvent.EndpointAdded
      @JvmName("getEndpointAdded")
      get() = _builder.getEndpointAdded()
      @JvmName("setEndpointAdded")
      set(value) {
        _builder.setEndpointAdded(value)
      }
    /**
     * `.fishjam.media_events.server.MediaEvent.EndpointAdded endpoint_added = 5;`
     */
    public fun clearEndpointAdded() {
      _builder.clearEndpointAdded()
    }
    /**
     * `.fishjam.media_events.server.MediaEvent.EndpointAdded endpoint_added = 5;`
     * @return Whether the endpointAdded field is set.
     */
    public fun hasEndpointAdded(): kotlin.Boolean {
      return _builder.hasEndpointAdded()
    }

    /**
     * `.fishjam.media_events.server.MediaEvent.EndpointRemoved endpoint_removed = 6;`
     */
    public var endpointRemoved: fishjam.media_events.server.Server.MediaEvent.EndpointRemoved
      @JvmName("getEndpointRemoved")
      get() = _builder.getEndpointRemoved()
      @JvmName("setEndpointRemoved")
      set(value) {
        _builder.setEndpointRemoved(value)
      }
    /**
     * `.fishjam.media_events.server.MediaEvent.EndpointRemoved endpoint_removed = 6;`
     */
    public fun clearEndpointRemoved() {
      _builder.clearEndpointRemoved()
    }
    /**
     * `.fishjam.media_events.server.MediaEvent.EndpointRemoved endpoint_removed = 6;`
     * @return Whether the endpointRemoved field is set.
     */
    public fun hasEndpointRemoved(): kotlin.Boolean {
      return _builder.hasEndpointRemoved()
    }

    /**
     * `.fishjam.media_events.server.MediaEvent.Connected connected = 7;`
     */
    public var connected: fishjam.media_events.server.Server.MediaEvent.Connected
      @JvmName("getConnected")
      get() = _builder.getConnected()
      @JvmName("setConnected")
      set(value) {
        _builder.setConnected(value)
      }
    /**
     * `.fishjam.media_events.server.MediaEvent.Connected connected = 7;`
     */
    public fun clearConnected() {
      _builder.clearConnected()
    }
    /**
     * `.fishjam.media_events.server.MediaEvent.Connected connected = 7;`
     * @return Whether the connected field is set.
     */
    public fun hasConnected(): kotlin.Boolean {
      return _builder.hasConnected()
    }

    /**
     * `.fishjam.media_events.server.MediaEvent.Error error = 8;`
     */
    public var error: fishjam.media_events.server.Server.MediaEvent.Error
      @JvmName("getError")
      get() = _builder.getError()
      @JvmName("setError")
      set(value) {
        _builder.setError(value)
      }
    /**
     * `.fishjam.media_events.server.MediaEvent.Error error = 8;`
     */
    public fun clearError() {
      _builder.clearError()
    }
    /**
     * `.fishjam.media_events.server.MediaEvent.Error error = 8;`
     * @return Whether the error field is set.
     */
    public fun hasError(): kotlin.Boolean {
      return _builder.hasError()
    }

    /**
     * `.fishjam.media_events.server.MediaEvent.OfferData offer_data = 9;`
     */
    public var offerData: fishjam.media_events.server.Server.MediaEvent.OfferData
      @JvmName("getOfferData")
      get() = _builder.getOfferData()
      @JvmName("setOfferData")
      set(value) {
        _builder.setOfferData(value)
      }
    /**
     * `.fishjam.media_events.server.MediaEvent.OfferData offer_data = 9;`
     */
    public fun clearOfferData() {
      _builder.clearOfferData()
    }
    /**
     * `.fishjam.media_events.server.MediaEvent.OfferData offer_data = 9;`
     * @return Whether the offerData field is set.
     */
    public fun hasOfferData(): kotlin.Boolean {
      return _builder.hasOfferData()
    }

    /**
     * `.fishjam.media_events.Candidate candidate = 10;`
     */
    public var candidate: fishjam.media_events.Shared.Candidate
      @JvmName("getCandidate")
      get() = _builder.getCandidate()
      @JvmName("setCandidate")
      set(value) {
        _builder.setCandidate(value)
      }
    /**
     * `.fishjam.media_events.Candidate candidate = 10;`
     */
    public fun clearCandidate() {
      _builder.clearCandidate()
    }
    /**
     * `.fishjam.media_events.Candidate candidate = 10;`
     * @return Whether the candidate field is set.
     */
    public fun hasCandidate(): kotlin.Boolean {
      return _builder.hasCandidate()
    }

    /**
     * `.fishjam.media_events.server.MediaEvent.SdpAnswer sdp_answer = 11;`
     */
    public var sdpAnswer: fishjam.media_events.server.Server.MediaEvent.SdpAnswer
      @JvmName("getSdpAnswer")
      get() = _builder.getSdpAnswer()
      @JvmName("setSdpAnswer")
      set(value) {
        _builder.setSdpAnswer(value)
      }
    /**
     * `.fishjam.media_events.server.MediaEvent.SdpAnswer sdp_answer = 11;`
     */
    public fun clearSdpAnswer() {
      _builder.clearSdpAnswer()
    }
    /**
     * `.fishjam.media_events.server.MediaEvent.SdpAnswer sdp_answer = 11;`
     * @return Whether the sdpAnswer field is set.
     */
    public fun hasSdpAnswer(): kotlin.Boolean {
      return _builder.hasSdpAnswer()
    }

    /**
     * `.fishjam.media_events.server.MediaEvent.VadNotification vad_notification = 12;`
     */
    public var vadNotification: fishjam.media_events.server.Server.MediaEvent.VadNotification
      @JvmName("getVadNotification")
      get() = _builder.getVadNotification()
      @JvmName("setVadNotification")
      set(value) {
        _builder.setVadNotification(value)
      }
    /**
     * `.fishjam.media_events.server.MediaEvent.VadNotification vad_notification = 12;`
     */
    public fun clearVadNotification() {
      _builder.clearVadNotification()
    }
    /**
     * `.fishjam.media_events.server.MediaEvent.VadNotification vad_notification = 12;`
     * @return Whether the vadNotification field is set.
     */
    public fun hasVadNotification(): kotlin.Boolean {
      return _builder.hasVadNotification()
    }
    public val contentCase: fishjam.media_events.server.Server.MediaEvent.ContentCase
      @JvmName("getContentCase")
      get() = _builder.getContentCase()

    public fun clearContent() {
      _builder.clearContent()
    }
  }
  @kotlin.jvm.JvmName("-initializetrack")
  public inline fun track(block: fishjam.media_events.server.MediaEventKt.TrackKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.Track =
    fishjam.media_events.server.MediaEventKt.TrackKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.Track.newBuilder()).apply { block() }._build()
  /**
   * ```
   * SCHEMAS
   * ```
   *
   * Protobuf type `fishjam.media_events.server.MediaEvent.Track`
   */
  public object TrackKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.server.Server.MediaEvent.Track.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.Track.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.server.Server.MediaEvent.Track = _builder.build()

      /**
       * `string track_id = 1;`
       */
      public var trackId: kotlin.String
        @JvmName("getTrackId")
        get() = _builder.getTrackId()
        @JvmName("setTrackId")
        set(value) {
          _builder.setTrackId(value)
        }
      /**
       * `string track_id = 1;`
       */
      public fun clearTrackId() {
        _builder.clearTrackId()
      }

      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       */
      public var metadata: fishjam.media_events.Shared.Metadata
        @JvmName("getMetadata")
        get() = _builder.getMetadata()
        @JvmName("setMetadata")
        set(value) {
          _builder.setMetadata(value)
        }
      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       */
      public fun clearMetadata() {
        _builder.clearMetadata()
      }
      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       * @return Whether the metadata field is set.
       */
      public fun hasMetadata(): kotlin.Boolean {
        return _builder.hasMetadata()
      }
      public val TrackKt.Dsl.metadataOrNull: fishjam.media_events.Shared.Metadata?
        get() = _builder.metadataOrNull
    }
  }
  @kotlin.jvm.JvmName("-initializeendpoint")
  public inline fun endpoint(block: fishjam.media_events.server.MediaEventKt.EndpointKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.Endpoint =
    fishjam.media_events.server.MediaEventKt.EndpointKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.Endpoint.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `fishjam.media_events.server.MediaEvent.Endpoint`
   */
  public object EndpointKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.server.Server.MediaEvent.Endpoint.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.Endpoint.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.server.Server.MediaEvent.Endpoint = _builder.build()

      /**
       * `string endpoint_id = 1;`
       */
      public var endpointId: kotlin.String
        @JvmName("getEndpointId")
        get() = _builder.getEndpointId()
        @JvmName("setEndpointId")
        set(value) {
          _builder.setEndpointId(value)
        }
      /**
       * `string endpoint_id = 1;`
       */
      public fun clearEndpointId() {
        _builder.clearEndpointId()
      }

      /**
       * `string endpoint_type = 2;`
       */
      public var endpointType: kotlin.String
        @JvmName("getEndpointType")
        get() = _builder.getEndpointType()
        @JvmName("setEndpointType")
        set(value) {
          _builder.setEndpointType(value)
        }
      /**
       * `string endpoint_type = 2;`
       */
      public fun clearEndpointType() {
        _builder.clearEndpointType()
      }

      /**
       * `.fishjam.media_events.Metadata metadata = 3;`
       */
      public var metadata: fishjam.media_events.Shared.Metadata
        @JvmName("getMetadata")
        get() = _builder.getMetadata()
        @JvmName("setMetadata")
        set(value) {
          _builder.setMetadata(value)
        }
      /**
       * `.fishjam.media_events.Metadata metadata = 3;`
       */
      public fun clearMetadata() {
        _builder.clearMetadata()
      }
      /**
       * `.fishjam.media_events.Metadata metadata = 3;`
       * @return Whether the metadata field is set.
       */
      public fun hasMetadata(): kotlin.Boolean {
        return _builder.hasMetadata()
      }
      public val EndpointKt.Dsl.metadataOrNull: fishjam.media_events.Shared.Metadata?
        get() = _builder.metadataOrNull

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class TracksProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Track tracks = 4;`
       */
       public val tracks: com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Track, TracksProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getTracksList()
        )
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Track tracks = 4;`
       * @param value The tracks to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addTracks")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Track, TracksProxy>.add(value: fishjam.media_events.server.Server.MediaEvent.Track) {
        _builder.addTracks(value)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Track tracks = 4;`
       * @param value The tracks to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignTracks")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Track, TracksProxy>.plusAssign(value: fishjam.media_events.server.Server.MediaEvent.Track) {
        add(value)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Track tracks = 4;`
       * @param values The tracks to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllTracks")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Track, TracksProxy>.addAll(values: kotlin.collections.Iterable<fishjam.media_events.server.Server.MediaEvent.Track>) {
        _builder.addAllTracks(values)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Track tracks = 4;`
       * @param values The tracks to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllTracks")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Track, TracksProxy>.plusAssign(values: kotlin.collections.Iterable<fishjam.media_events.server.Server.MediaEvent.Track>) {
        addAll(values)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Track tracks = 4;`
       * @param index The index to set the value at.
       * @param value The tracks to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setTracks")
      public operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Track, TracksProxy>.set(index: kotlin.Int, value: fishjam.media_events.server.Server.MediaEvent.Track) {
        _builder.setTracks(index, value)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Track tracks = 4;`
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearTracks")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Track, TracksProxy>.clear() {
        _builder.clearTracks()
      }

    }
  }
  @kotlin.jvm.JvmName("-initializeendpointUpdated")
  public inline fun endpointUpdated(block: fishjam.media_events.server.MediaEventKt.EndpointUpdatedKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.EndpointUpdated =
    fishjam.media_events.server.MediaEventKt.EndpointUpdatedKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.EndpointUpdated.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent when metadata of one of the endpoints was updated
   * ```
   *
   * Protobuf type `fishjam.media_events.server.MediaEvent.EndpointUpdated`
   */
  public object EndpointUpdatedKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.server.Server.MediaEvent.EndpointUpdated.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.EndpointUpdated.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.server.Server.MediaEvent.EndpointUpdated = _builder.build()

      /**
       * `string endpoint_id = 1;`
       */
      public var endpointId: kotlin.String
        @JvmName("getEndpointId")
        get() = _builder.getEndpointId()
        @JvmName("setEndpointId")
        set(value) {
          _builder.setEndpointId(value)
        }
      /**
       * `string endpoint_id = 1;`
       */
      public fun clearEndpointId() {
        _builder.clearEndpointId()
      }

      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       */
      public var metadata: fishjam.media_events.Shared.Metadata
        @JvmName("getMetadata")
        get() = _builder.getMetadata()
        @JvmName("setMetadata")
        set(value) {
          _builder.setMetadata(value)
        }
      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       */
      public fun clearMetadata() {
        _builder.clearMetadata()
      }
      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       * @return Whether the metadata field is set.
       */
      public fun hasMetadata(): kotlin.Boolean {
        return _builder.hasMetadata()
      }
      public val EndpointUpdatedKt.Dsl.metadataOrNull: fishjam.media_events.Shared.Metadata?
        get() = _builder.metadataOrNull
    }
  }
  @kotlin.jvm.JvmName("-initializetrackUpdated")
  public inline fun trackUpdated(block: fishjam.media_events.server.MediaEventKt.TrackUpdatedKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.TrackUpdated =
    fishjam.media_events.server.MediaEventKt.TrackUpdatedKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.TrackUpdated.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent when metadata of one of the tracks was updated
   * ```
   *
   * Protobuf type `fishjam.media_events.server.MediaEvent.TrackUpdated`
   */
  public object TrackUpdatedKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.server.Server.MediaEvent.TrackUpdated.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.TrackUpdated.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.server.Server.MediaEvent.TrackUpdated = _builder.build()

      /**
       * `string endpoint_id = 1;`
       */
      public var endpointId: kotlin.String
        @JvmName("getEndpointId")
        get() = _builder.getEndpointId()
        @JvmName("setEndpointId")
        set(value) {
          _builder.setEndpointId(value)
        }
      /**
       * `string endpoint_id = 1;`
       */
      public fun clearEndpointId() {
        _builder.clearEndpointId()
      }

      /**
       * `string track_id = 2;`
       */
      public var trackId: kotlin.String
        @JvmName("getTrackId")
        get() = _builder.getTrackId()
        @JvmName("setTrackId")
        set(value) {
          _builder.setTrackId(value)
        }
      /**
       * `string track_id = 2;`
       */
      public fun clearTrackId() {
        _builder.clearTrackId()
      }

      /**
       * `.fishjam.media_events.Metadata metadata = 3;`
       */
      public var metadata: fishjam.media_events.Shared.Metadata
        @JvmName("getMetadata")
        get() = _builder.getMetadata()
        @JvmName("setMetadata")
        set(value) {
          _builder.setMetadata(value)
        }
      /**
       * `.fishjam.media_events.Metadata metadata = 3;`
       */
      public fun clearMetadata() {
        _builder.clearMetadata()
      }
      /**
       * `.fishjam.media_events.Metadata metadata = 3;`
       * @return Whether the metadata field is set.
       */
      public fun hasMetadata(): kotlin.Boolean {
        return _builder.hasMetadata()
      }
      public val TrackUpdatedKt.Dsl.metadataOrNull: fishjam.media_events.Shared.Metadata?
        get() = _builder.metadataOrNull
    }
  }
  @kotlin.jvm.JvmName("-initializetracksAdded")
  public inline fun tracksAdded(block: fishjam.media_events.server.MediaEventKt.TracksAddedKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.TracksAdded =
    fishjam.media_events.server.MediaEventKt.TracksAddedKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.TracksAdded.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent to informs that one of the peers has added one or more tracks.
   * ```
   *
   * Protobuf type `fishjam.media_events.server.MediaEvent.TracksAdded`
   */
  public object TracksAddedKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.server.Server.MediaEvent.TracksAdded.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.TracksAdded.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.server.Server.MediaEvent.TracksAdded = _builder.build()

      /**
       * `string endpoint_id = 1;`
       */
      public var endpointId: kotlin.String
        @JvmName("getEndpointId")
        get() = _builder.getEndpointId()
        @JvmName("setEndpointId")
        set(value) {
          _builder.setEndpointId(value)
        }
      /**
       * `string endpoint_id = 1;`
       */
      public fun clearEndpointId() {
        _builder.clearEndpointId()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class TracksProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Track tracks = 2;`
       */
       public val tracks: com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Track, TracksProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getTracksList()
        )
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Track tracks = 2;`
       * @param value The tracks to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addTracks")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Track, TracksProxy>.add(value: fishjam.media_events.server.Server.MediaEvent.Track) {
        _builder.addTracks(value)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Track tracks = 2;`
       * @param value The tracks to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignTracks")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Track, TracksProxy>.plusAssign(value: fishjam.media_events.server.Server.MediaEvent.Track) {
        add(value)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Track tracks = 2;`
       * @param values The tracks to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllTracks")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Track, TracksProxy>.addAll(values: kotlin.collections.Iterable<fishjam.media_events.server.Server.MediaEvent.Track>) {
        _builder.addAllTracks(values)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Track tracks = 2;`
       * @param values The tracks to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllTracks")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Track, TracksProxy>.plusAssign(values: kotlin.collections.Iterable<fishjam.media_events.server.Server.MediaEvent.Track>) {
        addAll(values)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Track tracks = 2;`
       * @param index The index to set the value at.
       * @param value The tracks to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setTracks")
      public operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Track, TracksProxy>.set(index: kotlin.Int, value: fishjam.media_events.server.Server.MediaEvent.Track) {
        _builder.setTracks(index, value)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Track tracks = 2;`
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearTracks")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Track, TracksProxy>.clear() {
        _builder.clearTracks()
      }

    }
  }
  @kotlin.jvm.JvmName("-initializetracksRemoved")
  public inline fun tracksRemoved(block: fishjam.media_events.server.MediaEventKt.TracksRemovedKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.TracksRemoved =
    fishjam.media_events.server.MediaEventKt.TracksRemovedKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.TracksRemoved.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent to informs that one of the peers has removed one or more tracks.
   * ```
   *
   * Protobuf type `fishjam.media_events.server.MediaEvent.TracksRemoved`
   */
  public object TracksRemovedKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.server.Server.MediaEvent.TracksRemoved.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.TracksRemoved.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.server.Server.MediaEvent.TracksRemoved = _builder.build()

      /**
       * `string endpoint_id = 1;`
       */
      public var endpointId: kotlin.String
        @JvmName("getEndpointId")
        get() = _builder.getEndpointId()
        @JvmName("setEndpointId")
        set(value) {
          _builder.setEndpointId(value)
        }
      /**
       * `string endpoint_id = 1;`
       */
      public fun clearEndpointId() {
        _builder.clearEndpointId()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class TrackIdsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * `repeated string track_ids = 2;`
       * @return A list containing the trackIds.
       */
      public val trackIds: com.google.protobuf.kotlin.DslList<kotlin.String, TrackIdsProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getTrackIdsList()
        )
      /**
       * `repeated string track_ids = 2;`
       * @param value The trackIds to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addTrackIds")
      public fun com.google.protobuf.kotlin.DslList<kotlin.String, TrackIdsProxy>.add(value: kotlin.String) {
        _builder.addTrackIds(value)
      }
      /**
       * `repeated string track_ids = 2;`
       * @param value The trackIds to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignTrackIds")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, TrackIdsProxy>.plusAssign(value: kotlin.String) {
        add(value)
      }
      /**
       * `repeated string track_ids = 2;`
       * @param values The trackIds to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllTrackIds")
      public fun com.google.protobuf.kotlin.DslList<kotlin.String, TrackIdsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
        _builder.addAllTrackIds(values)
      }
      /**
       * `repeated string track_ids = 2;`
       * @param values The trackIds to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllTrackIds")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, TrackIdsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
        addAll(values)
      }
      /**
       * `repeated string track_ids = 2;`
       * @param index The index to set the value at.
       * @param value The trackIds to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setTrackIds")
      public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, TrackIdsProxy>.set(index: kotlin.Int, value: kotlin.String) {
        _builder.setTrackIds(index, value)
      }/**
       * `repeated string track_ids = 2;`
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearTrackIds")
      public fun com.google.protobuf.kotlin.DslList<kotlin.String, TrackIdsProxy>.clear() {
        _builder.clearTrackIds()
      }}
  }
  @kotlin.jvm.JvmName("-initializeendpointAdded")
  public inline fun endpointAdded(block: fishjam.media_events.server.MediaEventKt.EndpointAddedKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.EndpointAdded =
    fishjam.media_events.server.MediaEventKt.EndpointAddedKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.EndpointAdded.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent to all peers in the room after a new endpoint was added.
   * ```
   *
   * Protobuf type `fishjam.media_events.server.MediaEvent.EndpointAdded`
   */
  public object EndpointAddedKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.server.Server.MediaEvent.EndpointAdded.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.EndpointAdded.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.server.Server.MediaEvent.EndpointAdded = _builder.build()

      /**
       * `string endpoint_id = 1;`
       */
      public var endpointId: kotlin.String
        @JvmName("getEndpointId")
        get() = _builder.getEndpointId()
        @JvmName("setEndpointId")
        set(value) {
          _builder.setEndpointId(value)
        }
      /**
       * `string endpoint_id = 1;`
       */
      public fun clearEndpointId() {
        _builder.clearEndpointId()
      }

      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       */
      public var metadata: fishjam.media_events.Shared.Metadata
        @JvmName("getMetadata")
        get() = _builder.getMetadata()
        @JvmName("setMetadata")
        set(value) {
          _builder.setMetadata(value)
        }
      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       */
      public fun clearMetadata() {
        _builder.clearMetadata()
      }
      /**
       * `.fishjam.media_events.Metadata metadata = 2;`
       * @return Whether the metadata field is set.
       */
      public fun hasMetadata(): kotlin.Boolean {
        return _builder.hasMetadata()
      }
      public val EndpointAddedKt.Dsl.metadataOrNull: fishjam.media_events.Shared.Metadata?
        get() = _builder.metadataOrNull
    }
  }
  @kotlin.jvm.JvmName("-initializeconnected")
  public inline fun connected(block: fishjam.media_events.server.MediaEventKt.ConnectedKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.Connected =
    fishjam.media_events.server.MediaEventKt.ConnectedKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.Connected.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent to the peer after connecting to the WebRTC Endpoint.
   * ```
   *
   * Protobuf type `fishjam.media_events.server.MediaEvent.Connected`
   */
  public object ConnectedKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.server.Server.MediaEvent.Connected.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.Connected.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.server.Server.MediaEvent.Connected = _builder.build()

      /**
       * `string endpoint_id = 1;`
       */
      public var endpointId: kotlin.String
        @JvmName("getEndpointId")
        get() = _builder.getEndpointId()
        @JvmName("setEndpointId")
        set(value) {
          _builder.setEndpointId(value)
        }
      /**
       * `string endpoint_id = 1;`
       */
      public fun clearEndpointId() {
        _builder.clearEndpointId()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class EndpointsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Endpoint endpoints = 2;`
       */
       public val endpoints: com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Endpoint, EndpointsProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getEndpointsList()
        )
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Endpoint endpoints = 2;`
       * @param value The endpoints to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addEndpoints")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Endpoint, EndpointsProxy>.add(value: fishjam.media_events.server.Server.MediaEvent.Endpoint) {
        _builder.addEndpoints(value)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Endpoint endpoints = 2;`
       * @param value The endpoints to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignEndpoints")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Endpoint, EndpointsProxy>.plusAssign(value: fishjam.media_events.server.Server.MediaEvent.Endpoint) {
        add(value)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Endpoint endpoints = 2;`
       * @param values The endpoints to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllEndpoints")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Endpoint, EndpointsProxy>.addAll(values: kotlin.collections.Iterable<fishjam.media_events.server.Server.MediaEvent.Endpoint>) {
        _builder.addAllEndpoints(values)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Endpoint endpoints = 2;`
       * @param values The endpoints to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllEndpoints")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Endpoint, EndpointsProxy>.plusAssign(values: kotlin.collections.Iterable<fishjam.media_events.server.Server.MediaEvent.Endpoint>) {
        addAll(values)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Endpoint endpoints = 2;`
       * @param index The index to set the value at.
       * @param value The endpoints to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setEndpoints")
      public operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Endpoint, EndpointsProxy>.set(index: kotlin.Int, value: fishjam.media_events.server.Server.MediaEvent.Endpoint) {
        _builder.setEndpoints(index, value)
      }
      /**
       * `repeated .fishjam.media_events.server.MediaEvent.Endpoint endpoints = 2;`
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearEndpoints")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.server.Server.MediaEvent.Endpoint, EndpointsProxy>.clear() {
        _builder.clearEndpoints()
      }

    }
  }
  @kotlin.jvm.JvmName("-initializeendpointRemoved")
  public inline fun endpointRemoved(block: fishjam.media_events.server.MediaEventKt.EndpointRemovedKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.EndpointRemoved =
    fishjam.media_events.server.MediaEventKt.EndpointRemovedKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.EndpointRemoved.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent to all remaining peers in the room after some endpoint was removed.
   * ```
   *
   * Protobuf type `fishjam.media_events.server.MediaEvent.EndpointRemoved`
   */
  public object EndpointRemovedKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.server.Server.MediaEvent.EndpointRemoved.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.EndpointRemoved.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.server.Server.MediaEvent.EndpointRemoved = _builder.build()

      /**
       * `string endpoint_id = 1;`
       */
      public var endpointId: kotlin.String
        @JvmName("getEndpointId")
        get() = _builder.getEndpointId()
        @JvmName("setEndpointId")
        set(value) {
          _builder.setEndpointId(value)
        }
      /**
       * `string endpoint_id = 1;`
       */
      public fun clearEndpointId() {
        _builder.clearEndpointId()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializeerror")
  public inline fun error(block: fishjam.media_events.server.MediaEventKt.ErrorKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.Error =
    fishjam.media_events.server.MediaEventKt.ErrorKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.Error.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent to inform that an error occurred on the server providing a message to show
   * ```
   *
   * Protobuf type `fishjam.media_events.server.MediaEvent.Error`
   */
  public object ErrorKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.server.Server.MediaEvent.Error.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.Error.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.server.Server.MediaEvent.Error = _builder.build()

      /**
       * `string message = 1;`
       */
      public var message: kotlin.String
        @JvmName("getMessage")
        get() = _builder.getMessage()
        @JvmName("setMessage")
        set(value) {
          _builder.setMessage(value)
        }
      /**
       * `string message = 1;`
       */
      public fun clearMessage() {
        _builder.clearMessage()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializeofferData")
  public inline fun offerData(block: fishjam.media_events.server.MediaEventKt.OfferDataKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.OfferData =
    fishjam.media_events.server.MediaEventKt.OfferDataKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.OfferData.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent to inform about the number of audio and video tracks that will be sent from the engine to the peer
   * ```
   *
   * Protobuf type `fishjam.media_events.server.MediaEvent.OfferData`
   */
  public object OfferDataKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.server.Server.MediaEvent.OfferData.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.OfferData.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.server.Server.MediaEvent.OfferData = _builder.build()

      /**
       * `.fishjam.media_events.server.MediaEvent.OfferData.TrackTypes tracks_types = 1;`
       */
      public var tracksTypes: fishjam.media_events.server.Server.MediaEvent.OfferData.TrackTypes
        @JvmName("getTracksTypes")
        get() = _builder.getTracksTypes()
        @JvmName("setTracksTypes")
        set(value) {
          _builder.setTracksTypes(value)
        }
      /**
       * `.fishjam.media_events.server.MediaEvent.OfferData.TrackTypes tracks_types = 1;`
       */
      public fun clearTracksTypes() {
        _builder.clearTracksTypes()
      }
      /**
       * `.fishjam.media_events.server.MediaEvent.OfferData.TrackTypes tracks_types = 1;`
       * @return Whether the tracksTypes field is set.
       */
      public fun hasTracksTypes(): kotlin.Boolean {
        return _builder.hasTracksTypes()
      }
      public val OfferDataKt.Dsl.tracksTypesOrNull: fishjam.media_events.server.Server.MediaEvent.OfferData.TrackTypes?
        get() = _builder.tracksTypesOrNull
    }
    @kotlin.jvm.JvmName("-initializetrackTypes")
    public inline fun trackTypes(block: fishjam.media_events.server.MediaEventKt.OfferDataKt.TrackTypesKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.OfferData.TrackTypes =
      fishjam.media_events.server.MediaEventKt.OfferDataKt.TrackTypesKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.OfferData.TrackTypes.newBuilder()).apply { block() }._build()
    /**
     * Protobuf type `fishjam.media_events.server.MediaEvent.OfferData.TrackTypes`
     */
    public object TrackTypesKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      public class Dsl private constructor(
        private val _builder: fishjam.media_events.server.Server.MediaEvent.OfferData.TrackTypes.Builder
      ) {
        public companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.OfferData.TrackTypes.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): fishjam.media_events.server.Server.MediaEvent.OfferData.TrackTypes = _builder.build()

        /**
         * `int32 audio = 1;`
         */
        public var audio: kotlin.Int
          @JvmName("getAudio")
          get() = _builder.getAudio()
          @JvmName("setAudio")
          set(value) {
            _builder.setAudio(value)
          }
        /**
         * `int32 audio = 1;`
         */
        public fun clearAudio() {
          _builder.clearAudio()
        }

        /**
         * `int32 video = 2;`
         */
        public var video: kotlin.Int
          @JvmName("getVideo")
          get() = _builder.getVideo()
          @JvmName("setVideo")
          set(value) {
            _builder.setVideo(value)
          }
        /**
         * `int32 video = 2;`
         */
        public fun clearVideo() {
          _builder.clearVideo()
        }
      }
    }
  }
  @kotlin.jvm.JvmName("-initializesdpAnswer")
  public inline fun sdpAnswer(block: fishjam.media_events.server.MediaEventKt.SdpAnswerKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.SdpAnswer =
    fishjam.media_events.server.MediaEventKt.SdpAnswerKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.SdpAnswer.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent after receiving `SdpOffer` from Peer
   * ```
   *
   * Protobuf type `fishjam.media_events.server.MediaEvent.SdpAnswer`
   */
  public object SdpAnswerKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.server.Server.MediaEvent.SdpAnswer.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.SdpAnswer.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.server.Server.MediaEvent.SdpAnswer = _builder.build()

      /**
       * `string sdp_answer = 1;`
       */
      public var sdpAnswer: kotlin.String
        @JvmName("getSdpAnswer")
        get() = _builder.getSdpAnswer()
        @JvmName("setSdpAnswer")
        set(value) {
          _builder.setSdpAnswer(value)
        }
      /**
       * `string sdp_answer = 1;`
       */
      public fun clearSdpAnswer() {
        _builder.clearSdpAnswer()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class MidToTrackIdProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * `repeated .fishjam.media_events.MidToTrackId mid_to_track_id = 2;`
       */
       public val midToTrackId: com.google.protobuf.kotlin.DslList<fishjam.media_events.Shared.MidToTrackId, MidToTrackIdProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getMidToTrackIdList()
        )
      /**
       * `repeated .fishjam.media_events.MidToTrackId mid_to_track_id = 2;`
       * @param value The midToTrackId to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addMidToTrackId")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.Shared.MidToTrackId, MidToTrackIdProxy>.add(value: fishjam.media_events.Shared.MidToTrackId) {
        _builder.addMidToTrackId(value)
      }
      /**
       * `repeated .fishjam.media_events.MidToTrackId mid_to_track_id = 2;`
       * @param value The midToTrackId to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignMidToTrackId")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.Shared.MidToTrackId, MidToTrackIdProxy>.plusAssign(value: fishjam.media_events.Shared.MidToTrackId) {
        add(value)
      }
      /**
       * `repeated .fishjam.media_events.MidToTrackId mid_to_track_id = 2;`
       * @param values The midToTrackId to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllMidToTrackId")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.Shared.MidToTrackId, MidToTrackIdProxy>.addAll(values: kotlin.collections.Iterable<fishjam.media_events.Shared.MidToTrackId>) {
        _builder.addAllMidToTrackId(values)
      }
      /**
       * `repeated .fishjam.media_events.MidToTrackId mid_to_track_id = 2;`
       * @param values The midToTrackId to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllMidToTrackId")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.Shared.MidToTrackId, MidToTrackIdProxy>.plusAssign(values: kotlin.collections.Iterable<fishjam.media_events.Shared.MidToTrackId>) {
        addAll(values)
      }
      /**
       * `repeated .fishjam.media_events.MidToTrackId mid_to_track_id = 2;`
       * @param index The index to set the value at.
       * @param value The midToTrackId to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setMidToTrackId")
      public operator fun com.google.protobuf.kotlin.DslList<fishjam.media_events.Shared.MidToTrackId, MidToTrackIdProxy>.set(index: kotlin.Int, value: fishjam.media_events.Shared.MidToTrackId) {
        _builder.setMidToTrackId(index, value)
      }
      /**
       * `repeated .fishjam.media_events.MidToTrackId mid_to_track_id = 2;`
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearMidToTrackId")
      public fun com.google.protobuf.kotlin.DslList<fishjam.media_events.Shared.MidToTrackId, MidToTrackIdProxy>.clear() {
        _builder.clearMidToTrackId()
      }

    }
  }
  @kotlin.jvm.JvmName("-initializevadNotification")
  public inline fun vadNotification(block: fishjam.media_events.server.MediaEventKt.VadNotificationKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.VadNotification =
    fishjam.media_events.server.MediaEventKt.VadNotificationKt.Dsl._create(fishjam.media_events.server.Server.MediaEvent.VadNotification.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Sent to inform that the track denoted by `trackId` has changed their voice actiivty
   * For this notification to work, the server must be configured to use VAD extension
   * and the sender must support it.
   * ```
   *
   * Protobuf type `fishjam.media_events.server.MediaEvent.VadNotification`
   */
  public object VadNotificationKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: fishjam.media_events.server.Server.MediaEvent.VadNotification.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: fishjam.media_events.server.Server.MediaEvent.VadNotification.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): fishjam.media_events.server.Server.MediaEvent.VadNotification = _builder.build()

      /**
       * `string track_id = 1;`
       */
      public var trackId: kotlin.String
        @JvmName("getTrackId")
        get() = _builder.getTrackId()
        @JvmName("setTrackId")
        set(value) {
          _builder.setTrackId(value)
        }
      /**
       * `string track_id = 1;`
       */
      public fun clearTrackId() {
        _builder.clearTrackId()
      }

      /**
       * `.fishjam.media_events.server.MediaEvent.VadNotification.Status status = 2;`
       */
      public var status: fishjam.media_events.server.Server.MediaEvent.VadNotification.Status
        @JvmName("getStatus")
        get() = _builder.getStatus()
        @JvmName("setStatus")
        set(value) {
          _builder.setStatus(value)
        }
      public var statusValue: kotlin.Int
        @JvmName("getStatusValue")
        get() = _builder.getStatusValue()
        @JvmName("setStatusValue")
        set(value) {
          _builder.setStatusValue(value)
        }
      /**
       * `.fishjam.media_events.server.MediaEvent.VadNotification.Status status = 2;`
       */
      public fun clearStatus() {
        _builder.clearStatus()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.copy(block: `fishjam.media_events.server`.MediaEventKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent =
  `fishjam.media_events.server`.MediaEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.Track.copy(block: `fishjam.media_events.server`.MediaEventKt.TrackKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.Track =
  `fishjam.media_events.server`.MediaEventKt.TrackKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val fishjam.media_events.server.Server.MediaEvent.TrackOrBuilder.metadataOrNull: fishjam.media_events.Shared.Metadata?
  get() = if (hasMetadata()) getMetadata() else null

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.Endpoint.copy(block: `fishjam.media_events.server`.MediaEventKt.EndpointKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.Endpoint =
  `fishjam.media_events.server`.MediaEventKt.EndpointKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val fishjam.media_events.server.Server.MediaEvent.EndpointOrBuilder.metadataOrNull: fishjam.media_events.Shared.Metadata?
  get() = if (hasMetadata()) getMetadata() else null

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.EndpointUpdated.copy(block: `fishjam.media_events.server`.MediaEventKt.EndpointUpdatedKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.EndpointUpdated =
  `fishjam.media_events.server`.MediaEventKt.EndpointUpdatedKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val fishjam.media_events.server.Server.MediaEvent.EndpointUpdatedOrBuilder.metadataOrNull: fishjam.media_events.Shared.Metadata?
  get() = if (hasMetadata()) getMetadata() else null

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.TrackUpdated.copy(block: `fishjam.media_events.server`.MediaEventKt.TrackUpdatedKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.TrackUpdated =
  `fishjam.media_events.server`.MediaEventKt.TrackUpdatedKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val fishjam.media_events.server.Server.MediaEvent.TrackUpdatedOrBuilder.metadataOrNull: fishjam.media_events.Shared.Metadata?
  get() = if (hasMetadata()) getMetadata() else null

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.TracksAdded.copy(block: `fishjam.media_events.server`.MediaEventKt.TracksAddedKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.TracksAdded =
  `fishjam.media_events.server`.MediaEventKt.TracksAddedKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.TracksRemoved.copy(block: `fishjam.media_events.server`.MediaEventKt.TracksRemovedKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.TracksRemoved =
  `fishjam.media_events.server`.MediaEventKt.TracksRemovedKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.EndpointAdded.copy(block: `fishjam.media_events.server`.MediaEventKt.EndpointAddedKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.EndpointAdded =
  `fishjam.media_events.server`.MediaEventKt.EndpointAddedKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val fishjam.media_events.server.Server.MediaEvent.EndpointAddedOrBuilder.metadataOrNull: fishjam.media_events.Shared.Metadata?
  get() = if (hasMetadata()) getMetadata() else null

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.Connected.copy(block: `fishjam.media_events.server`.MediaEventKt.ConnectedKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.Connected =
  `fishjam.media_events.server`.MediaEventKt.ConnectedKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.EndpointRemoved.copy(block: `fishjam.media_events.server`.MediaEventKt.EndpointRemovedKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.EndpointRemoved =
  `fishjam.media_events.server`.MediaEventKt.EndpointRemovedKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.Error.copy(block: `fishjam.media_events.server`.MediaEventKt.ErrorKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.Error =
  `fishjam.media_events.server`.MediaEventKt.ErrorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.OfferData.copy(block: `fishjam.media_events.server`.MediaEventKt.OfferDataKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.OfferData =
  `fishjam.media_events.server`.MediaEventKt.OfferDataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.OfferData.TrackTypes.copy(block: `fishjam.media_events.server`.MediaEventKt.OfferDataKt.TrackTypesKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.OfferData.TrackTypes =
  `fishjam.media_events.server`.MediaEventKt.OfferDataKt.TrackTypesKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val fishjam.media_events.server.Server.MediaEvent.OfferDataOrBuilder.tracksTypesOrNull: fishjam.media_events.server.Server.MediaEvent.OfferData.TrackTypes?
  get() = if (hasTracksTypes()) getTracksTypes() else null

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.SdpAnswer.copy(block: `fishjam.media_events.server`.MediaEventKt.SdpAnswerKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.SdpAnswer =
  `fishjam.media_events.server`.MediaEventKt.SdpAnswerKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun fishjam.media_events.server.Server.MediaEvent.VadNotification.copy(block: `fishjam.media_events.server`.MediaEventKt.VadNotificationKt.Dsl.() -> kotlin.Unit): fishjam.media_events.server.Server.MediaEvent.VadNotification =
  `fishjam.media_events.server`.MediaEventKt.VadNotificationKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val fishjam.media_events.server.Server.MediaEventOrBuilder.endpointUpdatedOrNull: fishjam.media_events.server.Server.MediaEvent.EndpointUpdated?
  get() = if (hasEndpointUpdated()) getEndpointUpdated() else null

public val fishjam.media_events.server.Server.MediaEventOrBuilder.trackUpdatedOrNull: fishjam.media_events.server.Server.MediaEvent.TrackUpdated?
  get() = if (hasTrackUpdated()) getTrackUpdated() else null

public val fishjam.media_events.server.Server.MediaEventOrBuilder.tracksAddedOrNull: fishjam.media_events.server.Server.MediaEvent.TracksAdded?
  get() = if (hasTracksAdded()) getTracksAdded() else null

public val fishjam.media_events.server.Server.MediaEventOrBuilder.tracksRemovedOrNull: fishjam.media_events.server.Server.MediaEvent.TracksRemoved?
  get() = if (hasTracksRemoved()) getTracksRemoved() else null

public val fishjam.media_events.server.Server.MediaEventOrBuilder.endpointAddedOrNull: fishjam.media_events.server.Server.MediaEvent.EndpointAdded?
  get() = if (hasEndpointAdded()) getEndpointAdded() else null

public val fishjam.media_events.server.Server.MediaEventOrBuilder.endpointRemovedOrNull: fishjam.media_events.server.Server.MediaEvent.EndpointRemoved?
  get() = if (hasEndpointRemoved()) getEndpointRemoved() else null

public val fishjam.media_events.server.Server.MediaEventOrBuilder.connectedOrNull: fishjam.media_events.server.Server.MediaEvent.Connected?
  get() = if (hasConnected()) getConnected() else null

public val fishjam.media_events.server.Server.MediaEventOrBuilder.errorOrNull: fishjam.media_events.server.Server.MediaEvent.Error?
  get() = if (hasError()) getError() else null

public val fishjam.media_events.server.Server.MediaEventOrBuilder.offerDataOrNull: fishjam.media_events.server.Server.MediaEvent.OfferData?
  get() = if (hasOfferData()) getOfferData() else null

public val fishjam.media_events.server.Server.MediaEventOrBuilder.candidateOrNull: fishjam.media_events.Shared.Candidate?
  get() = if (hasCandidate()) getCandidate() else null

public val fishjam.media_events.server.Server.MediaEventOrBuilder.sdpAnswerOrNull: fishjam.media_events.server.Server.MediaEvent.SdpAnswer?
  get() = if (hasSdpAnswer()) getSdpAnswer() else null

public val fishjam.media_events.server.Server.MediaEventOrBuilder.vadNotificationOrNull: fishjam.media_events.server.Server.MediaEvent.VadNotification?
  get() = if (hasVadNotification()) getVadNotification() else null

