// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: fishjam/media_events/shared.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Fishjam_MediaEvents_Variant: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case low // = 1
  case medium // = 2
  case high // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .low
    case 2: self = .medium
    case 3: self = .high
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .low: return 1
    case .medium: return 2
    case .high: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Fishjam_MediaEvents_Variant: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Fishjam_MediaEvents_Variant] = [
    .unspecified,
    .low,
    .medium,
    .high,
  ]
}

#endif  // swift(>=4.2)

struct Fishjam_MediaEvents_Metadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var json: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Fishjam_MediaEvents_MidToTrackId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mid: String = String()

  var trackID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Contains information about an ICE candidate which will be sent to the peer/server
struct Fishjam_MediaEvents_Candidate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var candidate: String = String()

  var sdpMLineIndex: Int32 = 0

  var sdpMid: String = String()

  var usernameFragment: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Fishjam_MediaEvents_Variant: @unchecked Sendable {}
extension Fishjam_MediaEvents_Metadata: @unchecked Sendable {}
extension Fishjam_MediaEvents_MidToTrackId: @unchecked Sendable {}
extension Fishjam_MediaEvents_Candidate: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "fishjam.media_events"

extension Fishjam_MediaEvents_Variant: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VARIANT_UNSPECIFIED"),
    1: .same(proto: "VARIANT_LOW"),
    2: .same(proto: "VARIANT_MEDIUM"),
    3: .same(proto: "VARIANT_HIGH"),
  ]
}

extension Fishjam_MediaEvents_Metadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Metadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "json"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.json) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.json.isEmpty {
      try visitor.visitSingularStringField(value: self.json, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Fishjam_MediaEvents_Metadata, rhs: Fishjam_MediaEvents_Metadata) -> Bool {
    if lhs.json != rhs.json {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fishjam_MediaEvents_MidToTrackId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MidToTrackId"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mid"),
    2: .standard(proto: "track_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.mid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.trackID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mid.isEmpty {
      try visitor.visitSingularStringField(value: self.mid, fieldNumber: 1)
    }
    if !self.trackID.isEmpty {
      try visitor.visitSingularStringField(value: self.trackID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Fishjam_MediaEvents_MidToTrackId, rhs: Fishjam_MediaEvents_MidToTrackId) -> Bool {
    if lhs.mid != rhs.mid {return false}
    if lhs.trackID != rhs.trackID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fishjam_MediaEvents_Candidate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Candidate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "candidate"),
    2: .standard(proto: "sdp_m_line_index"),
    3: .standard(proto: "sdp_mid"),
    4: .standard(proto: "username_fragment"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.candidate) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.sdpMLineIndex) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sdpMid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.usernameFragment) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.candidate.isEmpty {
      try visitor.visitSingularStringField(value: self.candidate, fieldNumber: 1)
    }
    if self.sdpMLineIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.sdpMLineIndex, fieldNumber: 2)
    }
    if !self.sdpMid.isEmpty {
      try visitor.visitSingularStringField(value: self.sdpMid, fieldNumber: 3)
    }
    if !self.usernameFragment.isEmpty {
      try visitor.visitSingularStringField(value: self.usernameFragment, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Fishjam_MediaEvents_Candidate, rhs: Fishjam_MediaEvents_Candidate) -> Bool {
    if lhs.candidate != rhs.candidate {return false}
    if lhs.sdpMLineIndex != rhs.sdpMLineIndex {return false}
    if lhs.sdpMid != rhs.sdpMid {return false}
    if lhs.usernameFragment != rhs.usernameFragment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
